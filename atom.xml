<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sumomoshinqi]]></title>
  <link href="http://sumomoshinqi.github.io/atom.xml" rel="self"/>
  <link href="http://sumomoshinqi.github.io/"/>
  <updated>2015-08-09T00:24:31+08:00</updated>
  <id>http://sumomoshinqi.github.io/</id>
  <author>
    <name><![CDATA[sumomoshinqi]]></name>
    <email><![CDATA[edam.lqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customize MongoDB maxConn]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/08/08/customize-mongodb-maxconn/"/>
    <updated>2015-08-08T23:29:05+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/08/08/customize-mongodb-maxconn</id>
    <content type="html"><![CDATA[<p>Sometimes we need MongoDB support very large number of concurrent connections. To do that, following configurations should be modified.</p>

<!--more-->


<h3>1. Kill current mongod processes(es)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ps ax <span class="p">|</span> grep mongod    <span class="c"># Find current mongod processes</span>
</span><span class='line'><span class="nb">kill</span> -9 PID            <span class="c"># Kill them</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Unlock MongoDB max connection restriction</h3>

<p>Edit system configuration file <strong>limits.conf</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vim /etc/security/limits.conf  <span class="c"># Configuration file for the pam_limits module</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>For more information see <a href="http://linux.die.net/man/5/limits.conf">limits.conf</a></p></blockquote>

<p>Add following lines to change system resource limits
Here <strong>*</strong> means for all users, <strong>noproc</strong> means max user processes, <strong>nofile</strong> means max open files</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>root - core unlimited
</span><span class='line'>*    - core unlimited
</span><span class='line'>* soft noproc 65535
</span><span class='line'>* hard noproc 65535
</span><span class='line'>* soft nofile 409600
</span><span class='line'>* hard nofile 409600
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Reboot to apply all these changes</p>

<blockquote><p>Actually reboot <a href="http://unix.stackexchange.com/questions/108603/do-changes-in-etc-security-limits-conf-require-a-reboot">is not a must</a>, yet it&rsquo;s the easiest way to apply all changes.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>Now check ulimit settings</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">ulimit</span> -a
</span></code></pre></td></tr></table></div></figure>


<p>You shall see your changes here</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>core file size          <span class="o">(</span>blocks, -c<span class="o">)</span> unlimited
</span><span class='line'>data seg size           <span class="o">(</span>kbytes, -d<span class="o">)</span> unlimited
</span><span class='line'>scheduling priority             <span class="o">(</span>-e<span class="o">)</span> 0
</span><span class='line'>file size               <span class="o">(</span>blocks, -f<span class="o">)</span> unlimited
</span><span class='line'>pending signals                 <span class="o">(</span>-i<span class="o">)</span> 31420
</span><span class='line'>max locked memory       <span class="o">(</span>kbytes, -l<span class="o">)</span> 64
</span><span class='line'>max memory size         <span class="o">(</span>kbytes, -m<span class="o">)</span> unlimited
</span><span class='line'>open files                      <span class="o">(</span>-n<span class="o">)</span> 409600
</span><span class='line'>pipe size            <span class="o">(</span><span class="m">512</span> bytes, -p<span class="o">)</span> 8
</span><span class='line'>POSIX message queues     <span class="o">(</span>bytes, -q<span class="o">)</span> 819200
</span><span class='line'>real-time priority              <span class="o">(</span>-r<span class="o">)</span> 0
</span><span class='line'>stack size              <span class="o">(</span>kbytes, -s<span class="o">)</span> 8192
</span><span class='line'>cpu <span class="nb">time</span>               <span class="o">(</span>seconds, -t<span class="o">)</span> unlimited
</span><span class='line'>max user processes              <span class="o">(</span>-u<span class="o">)</span> 31420
</span><span class='line'>virtual memory          <span class="o">(</span>kbytes, -v<span class="o">)</span> unlimited
</span><span class='line'>file locks                      <span class="o">(</span>-x<span class="o">)</span> unlimited
</span></code></pre></td></tr></table></div></figure>


<h3>3. Restart <strong>mongod</strong> with your own <strong>maxConns</strong></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo mongod --maxConns<span class="o">=</span>20000
</span></code></pre></td></tr></table></div></figure>


<p>Probably you&rsquo;ll see this error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>exception in initAndListen std::exception: locale::facet::_S_create_c_locale name not valid, terminating
</span></code></pre></td></tr></table></div></figure>


<p>To fix it, set <strong>LC_ALL</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span><span class="s2">&quot;en_US.UTF-8&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart mongod in background</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo mongod --maxConns<span class="o">=</span><span class="m">20000</span> <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enter mongo shell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mongd
</span></code></pre></td></tr></table></div></figure>


<p>and check current <strong>maxConns</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; db.serverStatus<span class="o">()</span>.connections
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;current&quot;</span> : 1, <span class="s2">&quot;available&quot;</span> : 19999, <span class="s2">&quot;totalCreated&quot;</span> : NumberLong<span class="o">(</span>1<span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>For Jmeter users.
1. Run <em>Jmeter PerfMon agent</em> on the server to monitor server system status
You need first upload <strong>ServerAgent-X.X.X.zip</strong> to the server e.g. using <strong>sftp</strong>
Then unzip it anywhere you like :-)
It now looks something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>CMDRunner.jar  lib/  LICENSE  ServerAgent-2.2.1.zip  ServerAgent.jar  startAgent.bat  startAgent.sh
</span></code></pre></td></tr></table></div></figure>


<p>Run following command to keep the agent running in background</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./startAgent.sh --udp-port <span class="m">0</span> --tcp-port <span class="m">4444</span> <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now add listeners like <strong>jp@gc-PrfMon Metrics Colletor</strong> to your thread groups, configure the port your&rsquo;ll listen to and run your tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a "Plugged In" notification sound for Mac]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/06/23/add-a-plugged-notification-sound-for-mac/"/>
    <updated>2015-06-23T19:37:02+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/06/23/add-a-plugged-notification-sound-for-mac</id>
    <content type="html"><![CDATA[<p>iPhone has a special notification sound when plugged in.<br/>
In fact, Mac can do that too!</p>

<p>Here&rsquo;s how to enable it.</p>

<ul>
<li>Open terminal.app</li>
<li>Enter the following commands</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.PowerChime ChimeOnAllHardware -bool <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>open /System/Library/CoreServices/PowerChime.app <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you go. :)</p>

<p>Well, if you no longer want it. <br/>
Enter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.PowerChime ChimeOnAllHardware -bool <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>killall PowerChime
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 bit CPU design]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/05/05/8-bit-cpu-design/"/>
    <updated>2015-05-05T14:02:05+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/05/05/8-bit-cpu-design</id>
    <content type="html"><![CDATA[<p>Finally it works! 😂</p>

<!--more-->


<p>Design pattern<br/>
<img src="http://sumomoshinqi.github.io/images/posts/8bitcpu_design.png" alt="design pattern" /></p>

<p>Source code of my CPU VHDL implementation on a Xilinx XC2S150 FPGA.</p>

<figure class='code'><figcaption><span>8bit_cpu.vhd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
</pre></td><td class='code'><pre><code class='VHDL'><span class='line'><span class="k">library</span> <span class="nn">IEEE</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IEEE.STD_LOGIC_1164.ALL</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IEEE.STD_LOGIC_ARITH.ALL</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IEEE.STD_LOGIC_UNSIGNED.ALL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- ===================================================================================</span>
</span><span class='line'><span class="c1">-- ===================================================================================</span>
</span><span class='line'><span class="k">entity</span> <span class="nc">cpu_8</span> <span class="k">is</span>
</span><span class='line'>    <span class="k">Port</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">DB</span><span class="o">:</span>     <span class="k">inout</span> <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>     <span class="c1">--数据总线</span>
</span><span class='line'>        <span class="n">AB</span><span class="o">:</span>     <span class="k">buffer</span> <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>   <span class="c1">--地址总线</span>
</span><span class='line'>        <span class="n">CI</span><span class="o">:</span>     <span class="k">buffer</span> <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">31</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>   <span class="c1">--其中低10位是MPC的输出</span>
</span><span class='line'>        <span class="n">CO</span><span class="o">:</span>     <span class="k">in</span> <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">31</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>       <span class="c1">--微指令输入到MIR</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">--控制总线</span>
</span><span class='line'>        <span class="n">CLK</span><span class="p">,</span> <span class="n">RESET</span><span class="p">,</span> <span class="n">RUN</span><span class="o">:</span>              <span class="k">in</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>        <span class="n">MWR</span><span class="p">,</span> <span class="n">MRD</span><span class="p">,</span> <span class="n">IOR</span><span class="p">,</span> <span class="n">IOW</span><span class="p">,</span> <span class="n">MCLK</span><span class="o">:</span>     <span class="k">buffer</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">--外部观察</span>
</span><span class='line'>        <span class="n">CTRL1</span><span class="p">,</span> <span class="n">CTRL2</span><span class="p">,</span> <span class="n">CTRL3</span><span class="p">,</span> <span class="n">CTRL4</span><span class="o">:</span>   <span class="k">buffer</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>        <span class="n">MUX</span><span class="o">:</span>                          <span class="k">in</span> <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PRIX</span><span class="p">,</span> <span class="n">KRIX</span><span class="o">:</span>                   <span class="k">in</span> <span class="kt">std_logic</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="k">end</span> <span class="nc">cpu_8</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- ===================================================================================</span>
</span><span class='line'><span class="c1">-- ===================================================================================</span>
</span><span class='line'><span class="k">architecture</span> <span class="nc">cpu_8_behave</span> <span class="k">of</span> <span class="nc">cpu_8</span> <span class="k">is</span>
</span><span class='line'><span class="c1">--内部信号定义部分</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in M 存储器</span>
</span><span class='line'>    <span class="c1">--读写控制脉冲</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CWR</span><span class="p">,</span> <span class="n">CRD</span><span class="o">:</span>        <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">--读写控制信号</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CWRX</span><span class="p">,</span> <span class="n">CRDX</span><span class="o">:</span>      <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in A 累加器</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">GA</span><span class="p">,</span> <span class="n">ASR</span><span class="p">,</span> <span class="n">CA</span><span class="o">:</span>     <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">A</span><span class="o">:</span>               <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in ACT累加器暂存器</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ACT</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">GC</span><span class="p">,</span> <span class="n">CC</span><span class="o">:</span>          <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in TMP 临时寄存器</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">TMP</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">GT</span><span class="p">,</span> <span class="n">CT</span><span class="o">:</span>          <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in Ri 寄存器</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">R7</span><span class="p">,</span> <span class="n">R6</span><span class="p">,</span> <span class="n">R5</span><span class="p">,</span> <span class="n">R4</span><span class="p">,</span> <span class="n">R3</span><span class="p">,</span> <span class="n">R2</span><span class="p">,</span> <span class="n">R1</span><span class="p">,</span> <span class="n">R0</span><span class="p">,</span> <span class="n">ROUT</span><span class="o">:</span>    <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">WRE</span><span class="p">,</span> <span class="n">WRC</span><span class="o">:</span>        <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">RS</span><span class="o">:</span>              <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">---多路选择器 MUXA, MUXB, MUXC, MUXD</span>
</span><span class='line'><span class="c1">--signal in MUXA</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MXA</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MUXB</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">OB</span><span class="o">:</span>              <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MXB</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">1</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MUXC</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MXC</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">1</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MUXD</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">PLD</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">PCADD</span><span class="o">:</span>           <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MUXE</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MXE</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CYA</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CYD</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in ALU</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">FA</span><span class="p">,</span> <span class="n">FB</span><span class="p">,</span> <span class="n">FF</span><span class="o">:</span>      <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">8</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">S</span><span class="o">:</span>               <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in CY</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CY</span><span class="p">,</span> <span class="n">CP</span><span class="p">,</span> <span class="n">CCK</span><span class="o">:</span>     <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in Z</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ZY</span><span class="o">:</span>              <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ZP</span><span class="o">:</span>              <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ZCK</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in PC </span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">PC</span><span class="o">:</span>              <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">PCK</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">PINC</span><span class="p">,</span> <span class="n">PRST</span><span class="o">:</span>      <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ADR</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>      <span class="c1">--全地址</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in IR</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">IR</span><span class="o">:</span>              <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">signal</span> <span class="n">CCI</span><span class="p">,</span> <span class="n">GI</span><span class="o">:</span>         <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in ADRH</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ADRH</span><span class="o">:</span>            <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">GA1</span><span class="p">,</span> <span class="n">CA1</span><span class="p">,</span> <span class="n">AHS</span><span class="o">:</span>   <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in ADRL</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">ADRL</span><span class="o">:</span>            <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">GA2</span><span class="p">,</span> <span class="n">CA2</span><span class="o">:</span>        <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MPC</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MPC</span><span class="p">,</span> <span class="n">MD</span><span class="o">:</span>         <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">9</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MCLR</span><span class="p">,</span> <span class="n">MPLD</span><span class="o">:</span>      <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MPCK</span><span class="o">:</span>            <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in SP</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">SP</span><span class="o">:</span>              <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">SSP</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">1</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">SCK</span><span class="o">:</span>             <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--signal in MIR</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MIR</span><span class="o">:</span>             <span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">31</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">MICK</span><span class="o">:</span>            <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- signal for Print and Key</span>
</span><span class='line'>    <span class="k">signal</span> <span class="n">KOUT</span><span class="p">,</span><span class="n">POUT</span><span class="o">:</span>       <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- ==================================================================================</span>
</span><span class='line'><span class="c1">-- ==================================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--时钟信号与复位信号</span>
</span><span class='line'>
</span><span class='line'><span class="c1">---时钟信号</span>
</span><span class='line'>    <span class="n">pMCLK</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">MCLK</span><span class="p">,</span> <span class="n">CLK</span><span class="p">,</span> <span class="n">RESET</span><span class="p">,</span> <span class="n">RUN</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">RUN</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">or</span> <span class="p">(</span><span class="n">RESET</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">))</span> <span class="k">then</span> <span class="n">MCLK</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">elsif</span><span class="p">(</span><span class="n">CLK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CLK</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="n">MCLK</span> <span class="o">&lt;=</span> <span class="k">not</span> <span class="n">MCLK</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pMCLK</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MPCK</span>    <span class="o">&lt;=</span> <span class="k">not</span> <span class="n">MCLK</span> <span class="k">and</span> <span class="n">CLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MICK</span>    <span class="o">&lt;=</span> <span class="k">not</span> <span class="n">MPCK</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">WRC</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--寄存器 Ri 时钟</span>
</span><span class='line'>    <span class="n">PCK</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--PC 时钟</span>
</span><span class='line'>    <span class="n">CA</span>      <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--A 时钟</span>
</span><span class='line'>    <span class="n">CT</span>      <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--TMP 时钟</span>
</span><span class='line'>    <span class="n">CC</span>      <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--ACT 时钟</span>
</span><span class='line'>    <span class="n">CCI</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--IR 时钟</span>
</span><span class='line'>    <span class="n">CA1</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--ADRH 时钟</span>
</span><span class='line'>    <span class="n">CA2</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--ADRL 时钟</span>
</span><span class='line'>    <span class="n">CCK</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--CY 时钟</span>
</span><span class='line'>    <span class="n">SCK</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--SP 时钟</span>
</span><span class='line'>    <span class="n">ZCK</span>     <span class="o">&lt;=</span> <span class="n">MCLK</span><span class="p">;</span>        <span class="c1">--ZY 时钟</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">----复位信号</span>
</span><span class='line'>    <span class="n">PRST</span>   <span class="o">&lt;=</span> <span class="n">RESET</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pMCLR</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">MCLK</span><span class="p">,</span> <span class="n">RESET</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">RESET</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="n">MCLR</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">elsif</span><span class="p">(</span><span class="n">MCLK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">MCLK</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="n">MCLR</span> <span class="o">&lt;=</span> <span class="n">RUN</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pMCLR</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CWR</span>     <span class="o">&lt;=</span> <span class="n">CWRX</span> <span class="k">or</span> <span class="k">not</span> <span class="n">MCLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CRD</span>     <span class="o">&lt;=</span> <span class="n">CRDX</span> <span class="k">or</span> <span class="k">not</span> <span class="n">MCLK</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MRD</span>     <span class="o">&lt;=</span> <span class="n">CRD</span> <span class="k">or</span> <span class="n">AB</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MWR</span>     <span class="o">&lt;=</span> <span class="n">CWR</span> <span class="k">or</span> <span class="n">AB</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">or</span> <span class="k">not</span> <span class="n">CLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOW</span>     <span class="o">&lt;=</span> <span class="k">not</span> <span class="n">AB</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">or</span> <span class="k">not</span> <span class="n">AB</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">or</span> <span class="n">CWR</span> <span class="k">or</span> <span class="k">not</span> <span class="n">CLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOR</span>     <span class="o">&lt;=</span> <span class="k">not</span> <span class="n">AB</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">or</span> <span class="k">not</span> <span class="n">AB</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">or</span> <span class="n">CRD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">--功能部件</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MPC的定义</span>
</span><span class='line'>    <span class="n">pMPC</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">MPLD</span><span class="p">,</span> <span class="n">MPCK</span><span class="p">,</span> <span class="n">MCLR</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">MCLR</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">MPC</span> <span class="o">&lt;=</span> <span class="s">&quot;0000000000&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">elsif</span><span class="p">(</span><span class="n">MPCK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">MPCK</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">MPLD</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">MPC</span> <span class="o">&lt;=</span> <span class="n">MD</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span> <span class="n">MPC</span> <span class="o">&lt;=</span> <span class="n">MPC</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pMPC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">9</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">MPC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----为程序计数器入口MD的定义</span>
</span><span class='line'>    <span class="n">MD</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>           <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MD</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>           <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>           <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MD</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">3</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">IR</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MD</span><span class="p">(</span><span class="mi">9</span> <span class="k">downto</span> <span class="mi">8</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="s">&quot;00&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MIR的定义</span>
</span><span class='line'>    <span class="n">pMIR</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">MICK</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">MICK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">MICK</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">MIR</span> <span class="o">&lt;=</span> <span class="n">CO</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pMIR</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----微程序控制信号</span>
</span><span class='line'>    <span class="n">CWRX</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">29</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CRDX</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">28</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MPLD</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">27</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXC</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">26</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXC</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SSP</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">24</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SSP</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PINC</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PLD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">21</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PLD</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PLD</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">19</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXA</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span>
</span><span class='line'>    <span class="n">S</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">17</span><span class="p">);</span>
</span><span class='line'>    <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">S</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>    <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXE</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">14</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CP</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ZP</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXB</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MXB</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">OB</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GA2</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AHS</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GA1</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GI</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GT</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GC</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ASR</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GA</span>      <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">WRE</span>     <span class="o">&lt;=</span> <span class="n">MIR</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----寄存器Ri的定义</span>
</span><span class='line'>    <span class="n">RS</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">IR</span><span class="p">(</span><span class="mi">2</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pRi</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">WRC</span><span class="p">,</span> <span class="n">WRE</span><span class="p">,</span> <span class="n">RS</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">WRC</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">WRC</span> <span class="o">=</span><span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">WRE</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">RS</span> <span class="k">is</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;000&quot;</span> <span class="o">=&gt;</span> <span class="n">R0</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;001&quot;</span> <span class="o">=&gt;</span> <span class="n">R1</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;010&quot;</span> <span class="o">=&gt;</span> <span class="n">R2</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;011&quot;</span> <span class="o">=&gt;</span> <span class="n">R3</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;100&quot;</span> <span class="o">=&gt;</span> <span class="n">R4</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;101&quot;</span> <span class="o">=&gt;</span> <span class="n">R5</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;110&quot;</span> <span class="o">=&gt;</span> <span class="n">R6</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="s">&quot;111&quot;</span> <span class="o">=&gt;</span> <span class="n">R7</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="k">others</span> <span class="o">=&gt;</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>                <span class="k">end</span> <span class="k">case</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pRi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----寄存器输出ROUT的定义</span>
</span><span class='line'>    <span class="n">ROUT</span>    <span class="o">&lt;=</span>  <span class="n">R0</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R1</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R2</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R3</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R4</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R5</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;101&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R6</span> <span class="k">when</span> <span class="n">RS</span> <span class="o">=</span> <span class="s">&quot;110&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">R7</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MUXB的定义</span>
</span><span class='line'>    <span class="n">pMUXB</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">OB</span><span class="p">,</span> <span class="n">MXB</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">OB</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MXB</span> <span class="k">is</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;00&quot;</span> <span class="o">=&gt;</span> <span class="n">DB</span> <span class="o">&lt;=</span> <span class="n">FF</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;01&quot;</span> <span class="o">=&gt;</span> <span class="n">DB</span> <span class="o">&lt;=</span> <span class="n">PC</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;10&quot;</span> <span class="o">=&gt;</span> <span class="n">DB</span> <span class="o">&lt;=</span> <span class="n">PC</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">when</span> <span class="k">others</span> <span class="o">=&gt;</span> <span class="n">DB</span> <span class="o">&lt;=</span> <span class="n">ROUT</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">case</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">DB</span> <span class="o">&lt;=</span><span class="s">&quot;ZZZZZZZZ&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pMUXB</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MUXC的定义</span>
</span><span class='line'>    <span class="n">AB</span> <span class="o">&lt;=</span> <span class="n">PC</span>                <span class="k">when</span> <span class="n">MXC</span> <span class="o">=</span> <span class="s">&quot;00&quot;</span> <span class="k">else</span>
</span><span class='line'>          <span class="n">ADRH</span><span class="o">&amp;</span><span class="n">ADRL</span>         <span class="k">when</span> <span class="n">MXC</span> <span class="o">=</span> <span class="s">&quot;01&quot;</span> <span class="k">else</span>
</span><span class='line'>         <span class="n">SP</span>                 <span class="k">when</span> <span class="n">MXC</span> <span class="o">=</span> <span class="s">&quot;10&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MUXD的定义</span>
</span><span class='line'>    <span class="n">PCADD</span>   <span class="o">&lt;=</span>  <span class="sc">&#39;0&#39;</span>         <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">CY</span>          <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="k">not</span> <span class="n">ZY</span>      <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="k">not</span> <span class="n">KRIX</span>    <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="k">not</span> <span class="n">PRIX</span>    <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="sc">&#39;1&#39;</span>         <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;101&quot;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">ZY</span>          <span class="k">when</span> <span class="n">PLD</span> <span class="o">=</span> <span class="s">&quot;110&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----TMP的定义</span>
</span><span class='line'>    <span class="n">pTMP</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CT</span><span class="p">,</span> <span class="n">GT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CT</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CT</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">GT</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">TMP</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pTMP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----A的定义    </span>
</span><span class='line'>    <span class="n">pA</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CA</span><span class="p">,</span> <span class="n">ASR</span><span class="p">)</span>
</span><span class='line'>    <span class="k">variable</span> <span class="n">POOPOO</span><span class="o">:</span><span class="kt">std_logic_vector</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CA</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CA</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">ASR</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">POOPOO</span> <span class="o">:=</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>                <span class="n">CYA</span>  <span class="o">&lt;=</span> <span class="n">POOPOO</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>      <span class="c1">--移出的末位</span>
</span><span class='line'>                <span class="n">A</span>    <span class="o">&lt;=</span> <span class="n">POOPOO</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">POOPOO</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="k">elsif</span><span class="p">(</span><span class="n">GA</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">A</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pA</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----MUXE的定义</span>
</span><span class='line'>     <span class="n">CYD</span> <span class="o">&lt;=</span> <span class="n">FF</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">when</span> <span class="n">MXE</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">CYA</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----ACT的定义</span>
</span><span class='line'>    <span class="n">pACT</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CC</span><span class="p">,</span> <span class="n">GC</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CC</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CC</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">GC</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">ACT</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pACT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FA</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="o">&amp;</span><span class="n">ACT</span><span class="p">;</span> <span class="c1">--扩展成九位</span>
</span><span class='line'>    <span class="n">FB</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="o">&amp;</span><span class="n">ROUT</span> <span class="k">when</span> <span class="n">MXA</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="k">else</span>
</span><span class='line'>          <span class="sc">&#39;0&#39;</span><span class="o">&amp;</span><span class="n">TMP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----ALU的定义</span>
</span><span class='line'>    <span class="n">FF</span>  <span class="o">&lt;=</span>  <span class="n">FA</span> <span class="o">+</span> <span class="n">FB</span>         <span class="k">when</span> <span class="n">S</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">FA</span> <span class="o">-</span> <span class="n">FB</span>         <span class="k">when</span> <span class="n">S</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">FA</span>              <span class="k">when</span> <span class="n">S</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">FB</span>              <span class="k">when</span> <span class="n">S</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="k">not</span> <span class="n">FB</span>          <span class="k">when</span> <span class="n">S</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="s">&quot;000000000&quot;     when S = &quot;101&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="s">&quot;000000000&quot;     when S = &quot;110&quot;</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">FA</span> <span class="o">+</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----CY的定义</span>
</span><span class='line'>    <span class="n">pCY</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CCK</span><span class="p">,</span> <span class="n">CP</span><span class="p">,</span> <span class="n">FF</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CCK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CCK</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">CP</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">CY</span> <span class="o">&lt;=</span> <span class="n">CYD</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pCY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----ZY的定义</span>
</span><span class='line'>    <span class="n">pZY</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">ZCK</span><span class="p">,</span> <span class="n">ZP</span><span class="p">,</span> <span class="n">FF</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">ZCK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">ZCK</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">ZP</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">FF</span> <span class="o">=</span> <span class="s">&quot;000000000&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                    <span class="n">ZY</span> <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">ZY</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pZY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----PC的定义   </span>
</span><span class='line'>    <span class="n">pPC</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">PCK</span><span class="p">,</span> <span class="n">PRST</span><span class="p">,</span> <span class="n">PCADD</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">PRST</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">PC</span> <span class="o">&lt;=</span> <span class="s">&quot;0000000000000000&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">elsif</span><span class="p">(</span><span class="n">PCK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">PCK</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">PCADD</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="n">PC</span> <span class="o">&lt;=</span> <span class="n">AB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">elsif</span><span class="p">(</span><span class="n">PINC</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">PC</span> <span class="o">&lt;=</span> <span class="n">PC</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pPC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----IR的定义</span>
</span><span class='line'>    <span class="n">pIR</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CCI</span><span class="p">,</span> <span class="n">GI</span><span class="p">,</span> <span class="n">DB</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CCI</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CCI</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">GI</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">IR</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pIR</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----ADRH的定义</span>
</span><span class='line'>    <span class="n">pADRH</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CA1</span><span class="p">,</span> <span class="n">GA1</span><span class="p">,</span> <span class="n">AHS</span><span class="p">,</span> <span class="n">DB</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CA1</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CA1</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">AHS</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="n">ADRH</span> <span class="o">&lt;=</span> <span class="s">&quot;01111110&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">elsif</span><span class="p">(</span><span class="n">GA1</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                    <span class="n">ADRH</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pADRH</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----ADRL的定义</span>
</span><span class='line'>    <span class="n">pADRL</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">CA2</span><span class="p">,</span> <span class="n">GA2</span><span class="p">,</span> <span class="n">DB</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">CA2</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">CA2</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">GA2</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">ADRL</span> <span class="o">&lt;=</span> <span class="n">DB</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pADRL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----SP的定义</span>
</span><span class='line'>    <span class="n">pSP</span><span class="o">:</span>
</span><span class='line'>    <span class="k">process</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">SSP</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">SCK</span><span class="na">&#39;event</span> <span class="k">and</span> <span class="n">SCK</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">SSP</span> <span class="k">is</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;01&quot;</span> <span class="o">=&gt;</span> <span class="n">SP</span> <span class="o">&lt;=</span> <span class="n">SP</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;10&quot;</span> <span class="o">=&gt;</span> <span class="n">SP</span> <span class="o">&lt;=</span> <span class="n">SP</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">when</span> <span class="s">&quot;11&quot; =&gt; SP &lt;= &quot;0111111111111111&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">when</span> <span class="k">others</span> <span class="o">=&gt;</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">end</span> <span class="k">case</span><span class="p">;</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span> <span class="nc">pSP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">----</span>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">31</span> <span class="k">downto</span> <span class="mi">24</span><span class="p">)</span>    <span class="o">&lt;=</span>  <span class="n">A</span>                           <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">PC</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">8</span><span class="p">)</span>             <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">ADRH</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R0</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R2</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R4</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;101&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R6</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;110&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">TMP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">23</span> <span class="k">downto</span> <span class="mi">16</span><span class="p">)</span>    <span class="o">&lt;=</span>  <span class="n">IR</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">PC</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">)</span>              <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">ADRL</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R1</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R3</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R5</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;101&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">R7</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;110&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">ACT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">12</span><span class="p">)</span>    <span class="o">&lt;=</span>  <span class="n">SP</span><span class="p">(</span><span class="mi">15</span> <span class="k">downto</span> <span class="mi">12</span><span class="p">)</span>            <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">SP</span><span class="p">(</span><span class="mi">11</span> <span class="k">downto</span> <span class="mi">8</span><span class="p">)</span>             <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">SP</span><span class="p">(</span><span class="mi">7</span> <span class="k">downto</span> <span class="mi">4</span><span class="p">)</span>              <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">SP</span><span class="p">(</span><span class="mi">3</span> <span class="k">downto</span> <span class="mi">0</span><span class="p">)</span>              <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">MIR</span><span class="p">(</span><span class="mi">17</span> <span class="k">downto</span> <span class="mi">14</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>              <span class="o">&lt;=</span>  <span class="n">KRIX</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">PRIX</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">OB</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">MPLD</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">MIR</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CI</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>              <span class="o">&lt;=</span>  <span class="n">PRIX</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;000&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">KRIX</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;001&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">PINC</span>                        <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;010&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">GI</span>                          <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;011&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">CO</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>                       <span class="k">when</span> <span class="n">MUX</span> <span class="o">=</span> <span class="s">&quot;100&quot;</span> <span class="k">else</span>
</span><span class='line'>                            <span class="n">CO</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="nc">cpu_8_behave</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s my current instruction set.</p>

<figure class='code'><figcaption><span>instructionSet.asm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="no">Ri</span>
</span><span class='line'><span class="err">00000</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="nf">Ri</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="err">00001</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="err">@</span><span class="no">Ri</span>
</span><span class='line'><span class="err">00010</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="err">@</span><span class="nf">Ri</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="err">00011</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">ADD</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="no">Ri</span>
</span><span class='line'><span class="err">00100</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">SUB</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="no">Ri</span>
</span><span class='line'><span class="err">00101</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="c">#data8</span>
</span><span class='line'><span class="err">00110000</span>
</span><span class='line'><span class="nf">dddddddd</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">MOV</span>
</span><span class='line'><span class="nf">Ri</span><span class="p">,</span><span class="c">#data8</span>
</span><span class='line'><span class="err">00111</span><span class="nf">iii</span>
</span><span class='line'><span class="nf">dddddddd</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">LDA</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01000000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">STA</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01001000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">JC</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01010000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">JMP</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01011000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">JNKB</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01100000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">JNPB</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01101000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">CALL</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">01110000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">RET</span>
</span><span class='line'><span class="err">01111000</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">RSP</span>
</span><span class='line'><span class="err">10000000</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">SUB</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="err">@</span><span class="no">Ri</span>
</span><span class='line'><span class="err">10001</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">ASR</span>
</span><span class='line'><span class="nf">A</span>
</span><span class='line'><span class="err">10010000</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">CLR</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">10011000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">PUSH</span>
</span><span class='line'><span class="nf">Ri</span>
</span><span class='line'><span class="err">10100</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">POP</span>
</span><span class='line'><span class="nf">Ri</span>
</span><span class='line'><span class="err">10101</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">JZ</span>
</span><span class='line'><span class="nf">addr</span>
</span><span class='line'><span class="err">10110000</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'><span class="nf">aaaaaaaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">ADC</span>
</span><span class='line'><span class="nf">A</span><span class="p">,</span><span class="no">Ri</span>
</span><span class='line'><span class="err">10111</span><span class="nf">iii</span>
</span><span class='line'>
</span><span class='line'><span class="err">-</span><span class="nf">enddef</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the assembly code for testing 2-digit addition.</p>

<figure class='code'><figcaption><span>test.asm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">MOV</span> <span class="no">R7</span><span class="p">,</span><span class="c">#0H</span>
</span><span class='line'>
</span><span class='line'><span class="nl">W1:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W1</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="c">#AH</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">W2:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W2</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'>
</span><span class='line'><span class="nl">L2:</span>
</span><span class='line'> <span class="nf">JNKB</span> <span class="no">L2</span>
</span><span class='line'> <span class="nf">LDA</span> <span class="mi">8001</span><span class="no">H</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R2</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="nl">L1:</span>
</span><span class='line'> <span class="nf">JNKB</span> <span class="no">L1</span>
</span><span class='line'> <span class="nf">LDA</span> <span class="mi">8001</span><span class="no">H</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R1</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="nl">WL1:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WL1</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WL2:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WL2</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R2</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span><span class="c">#10H</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WADD:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WADD</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="c">#10H</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WADD1:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WADD1</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="c">#AH</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WADD2:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WADD2</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'>
</span><span class='line'><span class="nl">L4:</span>
</span><span class='line'> <span class="nf">JNKB</span> <span class="no">L4</span>
</span><span class='line'> <span class="nf">LDA</span> <span class="mi">8001</span><span class="no">H</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R4</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="nl">L3:</span>
</span><span class='line'> <span class="nf">JNKB</span> <span class="no">L3</span>
</span><span class='line'> <span class="nf">LDA</span> <span class="mi">8001</span><span class="no">H</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R3</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'><span class="nl">W3:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W3</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">W4:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W4</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R4</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span><span class="c">#10H</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WEQ:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WEQ</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="c">#19H</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WEQ1:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WEQ1</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="c">#AH</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'><span class="nl">WEQ2:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">WEQ2</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8002</span><span class="no">H</span>
</span><span class='line'>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R4</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R2</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R6</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R1</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R3</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R5</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span> <span class="c">#AH</span>
</span><span class='line'> <span class="nf">SUB</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">JC</span> <span class="no">Z1</span>
</span><span class='line'>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R5</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span><span class="c">#1H</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R6</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R6</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Z1:</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span><span class="c">#AH</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R6</span>
</span><span class='line'> <span class="nf">SUB</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">JC</span> <span class="no">Z2</span>
</span><span class='line'>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R6</span><span class="p">,</span><span class="no">A</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R7</span><span class="p">,</span><span class="c">#1H</span>
</span><span class='line'><span class="nl">Z2:</span>
</span><span class='line'><span class="nl">W5:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W5</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R5</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8003</span><span class="no">H</span>
</span><span class='line'><span class="nl">W6:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W6</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R6</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8003</span><span class="no">H</span>
</span><span class='line'><span class="nl">W7:</span>
</span><span class='line'> <span class="nf">JNPB</span> <span class="no">W7</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">A</span><span class="p">,</span><span class="no">R7</span>
</span><span class='line'> <span class="nf">MOV</span> <span class="no">R0</span><span class="p">,</span><span class="c">#10H</span>
</span><span class='line'> <span class="nf">ADD</span> <span class="no">A</span><span class="p">,</span><span class="no">R0</span>
</span><span class='line'> <span class="nf">STA</span> <span class="mi">8003</span><span class="no">H</span>
</span><span class='line'>
</span><span class='line'><span class="nl">LOOP:</span>
</span><span class='line'> <span class="nf">JMP</span> <span class="no">LOOP</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demon of 2-digit addition</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/dikTQ-9l2s0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Jam Qualification Round 2015]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/04/12/code-jam-qualification-round-2015/"/>
    <updated>2015-04-12T13:56:09+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/04/12/code-jam-qualification-round-2015</id>
    <content type="html"><![CDATA[<h4>Problem A. Standing Ovation</h4>

<p>Problem</p>

<p>It&rsquo;s opening night at the opera, and your friend is the prima donna (the lead female singer). You will not be in the audience, but you want to make sure she receives a standing ovation &ndash; with every audience member standing up and clapping their hands for her.</p>

<!--more-->


<p>Initially, the entire audience is seated. Everyone in the audience has a shyness level. An audience member with shyness level <em>Si</em> will wait until at least <em>Si</em> other audience members have already stood up to clap, and if so, she will immediately stand up and clap. If <em>Si</em> = 0, then the audience member will always stand up and clap immediately, regardless of what anyone else does. For example, an audience member with <em>Si</em> = 2 will be seated at the beginning, but will stand up to clap later after she sees at least two other people standing and clapping.</p>

<p>You know the shyness level of everyone in the audience, and you are prepared to invite additional friends of the prima donna to be in the audience to ensure that everyone in the crowd stands up and claps in the end. Each of these friends may have any shyness value that you wish, not necessarily the same. What is the minimum number of friends that you need to invite to guarantee a standing ovation?
Input</p>

<p>The first line of the input gives the number of test cases, <em>T</em>. <em>T</em> test cases follow. Each consists of one line with <em>Smax</em>, the maximum shyness level of the shyest person in the audience, followed by a string of <em>Smax</em> + 1 single digits. The <em>k</em>th digit of this string (counting starting from 0) represents how many people in the audience have shyness level <em>k</em>. For example, the string &ldquo;409&rdquo; would mean that there were four audience members with <em>Si</em> = 0 and nine audience members with <em>Si</em> = 2 (and none with <em>Si</em> = 1 or any other value). Note that there will initially always be between 0 and 9 people with each shyness level.</p>

<p>The string will never end in a 0. Note that this implies that there will always be at least one person in the audience.</p>

<p>Output</p>

<p>For each test case, output one line containing &ldquo;Case #x: y&rdquo;, where x is the test case number (starting from 1) and y is the minimum number of friends you must invite.</p>

<p>Limits</p>

<p>1 ≤ <em>T</em> ≤ 100.</p>

<p>Small dataset</p>

<p>0 ≤ <em>Smax</em> ≤ 6.</p>

<p>Large dataset</p>

<p>0 ≤ <em>Smax</em> ≤ 1000.</p>

<p>Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Input       Output
</span><span class='line'>
</span><span class='line'>4           Case #1: 0
</span><span class='line'>4 11111     Case #2: 1
</span><span class='line'>1 09        Case #3: 2
</span><span class='line'>5 110011    Case #4: 0
</span><span class='line'>0 1
</span></code></pre></td></tr></table></div></figure>


<p>In Case #1, the audience will eventually produce a standing ovation on its own, without you needing to add anyone &ndash; first the audience member with <em>Si</em> = 0 will stand up, then the audience member with <em>Si</em> = 1 will stand up, etc.</p>

<p>In Case #2, a friend with <em>Si</em> = 0 must be invited, but that is enough to get the entire audience to stand up.</p>

<p>In Case #3, one optimal solution is to add two audience members with <em>Si</em> = 2.</p>

<p>In Case #4, there is only one audience member and he will stand up immediately. No friends need to be invited.</p>

<p>Solution</p>

<figure class='code'><figcaption><span>A-small.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">Smax</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">shy</span><span class="p">,</span> <span class="n">addon</span><span class="p">,</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;A-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">stand</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">addon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %s&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Smax</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Smax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shy</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">stand</span> <span class="o">&gt;=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">stand</span> <span class="o">+=</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">shy</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="n">addon</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>                <span class="n">stand</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">addon</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>A-large.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">Smax</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">shy</span><span class="p">,</span> <span class="n">addon</span><span class="p">,</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">1005</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;A-large.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">stand</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">addon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %s&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Smax</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Smax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shy</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">stand</span> <span class="o">&gt;=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">stand</span> <span class="o">+=</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">shy</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="n">addon</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>                <span class="n">stand</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">addon</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Problem B. Infinite House of Pancakes</h4>

<p>Problem</p>

<p>At the Infinite House of Pancakes, there are only finitely many pancakes, but there are infinitely many diners who would be willing to eat them! When the restaurant opens for breakfast, among the infinitely many diners, exactly <em>D</em> have non-empty plates; the ith of these has <em>Pi</em> pancakes on his or her plate. Everyone else has an empty plate.</p>

<p>Normally, every minute, every diner with a non-empty plate will eat one pancake from his or her plate. However, some minutes may be special. In a special minute, the head server asks for the diners&#8217; attention, chooses a diner with a non-empty plate, and carefully lifts some number of pancakes off of that diner&rsquo;s plate and moves those pancakes onto one other diner&rsquo;s (empty or non-empty) plate. No diners eat during a special minute, because it would be rude.</p>

<p>You are the head server on duty this morning, and it is your job to decide which minutes, if any, will be special, and which pancakes will move where. That is, every minute, you can decide to either do nothing and let the diners eat, or declare a special minute and interrupt the diners to make a single movement of one or more pancakes, as described above.</p>

<p>Breakfast ends when there are no more pancakes left to eat. How quickly can you make that happen?</p>

<p>Input</p>

<p>The first line of the input gives the number of test cases, <em>T</em>. <em>T</em> test cases follow. Each consists of one line with <em>D</em>, the number of diners with non-empty plates, followed by another line with <em>D</em> space-separated integers representing the numbers of pancakes on those diners&#8217; plates.</p>

<p>Output</p>

<p>For each test case, output one line containing &ldquo;Case #x: y&rdquo;, where x is the test case number (starting from 1) and y is the smallest number of minutes needed to finish the breakfast.</p>

<p>Limits</p>

<p>1 ≤ <em>T</em> ≤ 100.</p>

<p>Small dataset</p>

<p>1 ≤ <em>D</em> ≤ 6.
1 ≤ <em>Pi</em> ≤ 9.</p>

<p>Large dataset</p>

<p>1 ≤ <em>D</em> ≤ 1000.
1 ≤ <em>Pi</em> ≤ 1000.</p>

<p>Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Input       Output
</span><span class='line'>
</span><span class='line'>3           Case #1: 3
</span><span class='line'>1           Case #2: 2
</span><span class='line'>3           Case #3: 3
</span><span class='line'>4
</span><span class='line'>1 2 1 2
</span><span class='line'>1
</span><span class='line'>4
</span></code></pre></td></tr></table></div></figure>


<p>In Case #1, one diner starts with 3 pancakes and everyone else&rsquo;s plate is empty. One optimal strategy is:</p>

<p>Minute 1: Do nothing. The diner will eat one pancake.</p>

<p>Minute 2 (special): Interrupt and move one pancake from that diner&rsquo;s stack onto another diner&rsquo;s empty plate. (Remember that there are always infinitely many diners with empty plates available, no matter how many diners start off with pancakes.) No pancakes are eaten during an interruption.</p>

<p>Minute 3: Do nothing. Each of those two diners will eat one of the last two remaining pancakes.</p>

<p>In Case #2, it is optimal to let the diners eat for 2 minutes, with no interruptions, during which time they will finish all the pancakes.</p>

<p>In Case #3, one diner starts with 4 pancakes and everyone else&rsquo;s plate is empty. It is optimal to use the first minute as a special minute to move two pancakes from the diner&rsquo;s plate to another diner&rsquo;s empty plate, and then do nothing and let the diners eat for the second and third minutes.</p>

<p>Solution</p>

<figure class='code'><figcaption><span>B-small.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">P</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">D</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">max</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">ii</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Time</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxDiner</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;B-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="o">++</span><span class="n">ii</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">newTime</span> <span class="o">+=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">ii</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">+=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">newTime</span> <span class="o">&lt;</span> <span class="n">Time</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Time</span> <span class="o">=</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">Time</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>B-large.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">P</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">D</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">max</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">ii</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Time</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxDiner</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minj</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;B-large.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">;</span> <span class="o">++</span><span class="n">ii</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">newTime</span> <span class="o">+=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">ii</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">+=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">newTime</span> <span class="o">&lt;</span> <span class="n">Time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Time</span> <span class="o">=</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>                <span class="n">minj</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">Time</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//printf(&quot;Case #%d: %d   minj = %d\n&quot;, i+1, Time, minj);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Problem C. Dijkstra</h4>

<p>Problem</p>

<p>The Dutch computer scientist Edsger Dijkstra made many important contributions to the field, including the shortest path finding algorithm that bears his name. This problem is not about that algorithm.</p>

<p>You were marked down one point on an algorithms exam for misspelling &ldquo;Dijkstra&rdquo; &ndash; between D and stra, you wrote some number of characters, each of which was either i, j, or k. You are prepared to argue to get your point back using quaternions, an actual number system (extended from complex numbers) with the following multiplicative structure:</p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-4-12-Dijkstra.jpeg" alt="Dijkstra" /></p>

<p>To multiply one quaternion by another, look at the row for the first quaternion and the column for the second quaternion. For example, to multiply i by j, look in the row for i and the column for j to find that the answer is k. To multiply j by i, look in the row for j and the column for i to find that the answer is -k.</p>

<p>As you can see from the above examples, the quaternions are not commutative &ndash; that is, there are some a and b for which a * b != b * a. However they are associative &ndash; for any a, b, and c, it&rsquo;s true that a * (b * c) = (a * b) * c.</p>

<p>Negative signs before quaternions work as they normally do &ndash; for any quaternions a and b, it&rsquo;s true that -a * -b = a * b, and -a * b = a * -b = -(a * b).</p>

<p>You want to argue that your misspelling was equivalent to the correct spelling ijk by showing that you can split your string of is, js, and ks in two places, forming three substrings, such that the leftmost substring reduces (under quaternion multiplication) to i, the middle substring reduces to j, and the right substring reduces to k. (For example, jij would be interpreted as j * i * j; j * i is -k, and -k * j is i, so jij reduces to i.) If this is possible, you will get your point back. Can you find a way to do it?</p>

<p>Input</p>

<p>The first line of the input gives the number of test cases, <em>T</em>. <em>T</em> test cases follow. Each consists of one line with two space-separated integers <em>L</em> and <em>X</em>, followed by another line with <em>L</em> characters, all of which are i, j, or k. Note that the string never contains negative signs, 1s, or any other characters. The string that you are to evaluate is the given string of <em>L</em> characters repeated <em>X</em> times. For instance, for <em>L</em> = 4, <em>X</em> = 3, and the given string kiij, your input string would be kiijkiijkiij.</p>

<p>Output</p>

<p>For each test case, output one line containing &ldquo;Case #x: y&rdquo;, where x is the test case number (starting from 1) and y is either YES or NO, depending on whether the string can be broken into three parts that reduce to i, j, and k, in that order, as described above.</p>

<p>Limits</p>

<p>1 ≤ <em>T</em> ≤ 100.
1 ≤ <em>L</em> ≤ 10000.</p>

<p>Small dataset</p>

<p>1 ≤ <em>X</em> ≤ 10000.
1 ≤ <em>L</em> * <em>X</em> ≤ 10000.</p>

<p>Large dataset</p>

<p>1 ≤ <em>X</em> ≤ 1012.
1 ≤ <em>L</em> * <em>X</em> ≤ 1016.</p>

<p>Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Input       Output
</span><span class='line'>
</span><span class='line'>5           Case #1: NO
</span><span class='line'>2 1         Case #2: YES
</span><span class='line'>ik          Case #3: NO
</span><span class='line'>3 1         Case #4: YES
</span><span class='line'>ijk         Case #5: NO
</span><span class='line'>3 1
</span><span class='line'>kji
</span><span class='line'>2 6
</span><span class='line'>ji
</span><span class='line'>1 10000
</span><span class='line'>i
</span></code></pre></td></tr></table></div></figure>


<p>In Case #1, the string is too short to be split into three substrings.</p>

<p>In Case #2, just split the string into i, j, and k.</p>

<p>In Case #3, the only way to split the string into three parts is k, j, i, and this does not satisfy the conditions.</p>

<p>In Case #4, the string is jijijijijiji. It can be split into jij (which reduces to i), iji (which reduces to j), and jijiji (which reduces to k).</p>

<p>In Case #5, no matter how you choose your substrings, none of them can ever reduce to a j or a k.</p>

<p>Solution</p>

<figure class='code'><figcaption><span>C-small.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#define _i 2</span>
</span><span class='line'><span class="cp">#define _j 3</span>
</span><span class='line'><span class="cp">#define _k 4</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">quaternion</span><span class="p">(</span><span class="kt">int</span> <span class="n">para1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">para2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sig</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">para1</span> <span class="o">*</span> <span class="n">para2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sig</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">sig</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">para1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">para2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_k</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_k</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_k</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_k</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">execTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flag</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">L</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">tmpChar</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">10005</span><span class="p">],</span> <span class="n">all</span><span class="p">[</span><span class="mi">10005</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;C-small-attempt1.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">execTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">execTime</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">execTime</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d &quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">L</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="n">X</span> <span class="o">*</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmpChar</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">X</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">*</span><span class="n">L</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">tmpChar</span><span class="o">-</span><span class="sc">&#39;i&#39;</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">all</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;&amp;</span> <span class="n">all</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;&amp;</span> <span class="n">all</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">END</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">Flag</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: YES</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: NO</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Problem D. Ominous Omino</h4>

<p>Problem</p>

<p>An N-omino is a two-dimensional shape formed by joining N unit cells fully along their edges in some way. More formally, a 1-omino is a 1x1 unit square, and an N-omino is an (N-1)omino with one or more of its edges joined to an adjacent 1x1 unit square. For the purpose of this problem, we consider two N-ominoes to be the same if one can be transformed into the other via reflection and/or rotation. For example, these are the five possible 4-ominoes:</p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-4-12-omino.png" alt="Omino1" /></p>

<p>And here are some of the 108 possible 7-ominoes:</p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-4-12-7-omino.png" alt="Omino2" /></p>

<p>Richard and Gabriel are going to play a game with the following rules, for some predetermined values of <em>X</em>, <em>R</em>, and <em>C</em>:</p>

<ol>
<li>Richard will choose any one of the possible <em>X</em>-ominoes.</li>
<li>Gabriel must use at least one copy of that <em>X</em>-omino, along with arbitrarily many copies of any <em>X</em>-ominoes (which can include the one Richard chose), to completely fill in an <em>R</em>-by-<em>C</em> grid, with no overlaps and no spillover. That is, every cell must be covered by exactly one of the <em>X</em> cells making up an <em>X</em>-omino, and no <em>X</em>-omino can extend outside the grid. Gabriel is allowed to rotate or reflect as many of the <em>X</em>-ominoes as he wants, including the one Richard chose. If Gabriel can completely fill in the grid, he wins; otherwise, Richard wins.</li>
</ol>


<p>Given particular values <em>X</em>, <em>R</em>, and <em>C</em>, can Richard choose an <em>X</em>-omino that will ensure that he wins, or is Gabriel guaranteed to win no matter what Richard chooses?</p>

<p>Input</p>

<p>The first line of the input gives the number of test cases, <em>T</em>. <em>T</em> lines follow. Each contains three space-separated integers: <em>X</em>, <em>R</em>, and <em>C</em>.</p>

<p>Output</p>

<p>For each test case, output one line containing &ldquo;Case #x: y&rdquo;, where x is the test case number (starting from 1) and y is either RICHARD (if there is at least one choice that ensures victory for Richard) or GABRIEL (if Gabriel will win no matter what Richard chooses).
Limits</p>

<p>Small dataset</p>

<p><em>T</em> = 64.
1 ≤ <em>X</em>, <em>R</em>, <em>C</em> ≤ 4.</p>

<p>Large dataset</p>

<p>1 ≤ <em>T</em> ≤ 100.
1 ≤ <em>X</em>, <em>R</em>, <em>*C</em> ≤ 20.</p>

<p>Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Input       Output
</span><span class='line'>
</span><span class='line'>4           Case #1: GABRIEL
</span><span class='line'>2 2 2       Case #2: RICHARD
</span><span class='line'>2 1 3       Case #3: RICHARD
</span><span class='line'>4 4 1       Case #4: GABRIEL
</span><span class='line'>3 2 3
</span></code></pre></td></tr></table></div></figure>


<p>In case #1, Richard only has one 2-omino available to choose &ndash; the 1x2 block formed by joining two unit cells together. No matter how Gabriel places this block in the 2x2 grid, he will leave a hole that can be exactly filled with another 1x2 block. So Gabriel wins.</p>

<p>In case #2, Richard has to choose the 1x2 block, but no matter where Gabriel puts it, he will be left with a single 1x1 hole that he cannot fill using only 2-ominoes. So Richard wins.</p>

<p>In case #3, one winning strategy for Richard is to choose the 2x2 square 4-omino. There is no way for Gabriel to fit that square into the 4x1 grid such that it is completely contained within the grid, so Richard wins.</p>

<p>In case #4, Richard can either pick the straight 3-omino or the L-shaped 3-omino. In either case, Gabriel can fit it into the grid and then use another copy of the same 3-omino to fill in the remaining hole.</p>

<p>Solution</p>

<figure class='code'><figcaption><span>D-small.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">execTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flag</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">C</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;D-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">execTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">execTime</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">execTime</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">X</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">R</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">((</span><span class="n">R</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span><span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">((</span><span class="n">R</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">C</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">R</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Flag</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: RICHARD</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: GABRIEL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Excel Sheet Column Title]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/04/07/leetcode-excel-sheet-column-title/"/>
    <updated>2015-04-07T21:13:20+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/04/07/leetcode-excel-sheet-column-title</id>
    <content type="html"><![CDATA[<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>

<!--more-->


<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 -&gt; A
</span><span class='line'>2 -&gt; B
</span><span class='line'>3 -&gt; C
</span><span class='line'>...
</span><span class='line'>26 -&gt; Z
</span><span class='line'>27 -&gt; AA
</span><span class='line'>28 -&gt; AB </span></code></pre></td></tr></table></div></figure>


<p>Here is a very short C++ solution using charactor lookup array.</p>

<p>The idea behind this algorithm is coming from the following numeric representation mapping to charactors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   A       B             Z  
</span><span class='line'>1+26*0, 2+26*0, ..., 26+26*0  
</span><span class='line'>  AA      AB            AZ    
</span><span class='line'>1+26*1, 2+26*1, ..., 26+26*1   
</span><span class='line'>  BA      BB            BZ     
</span><span class='line'>1+26*2, 2+26*2, ..., 26+26*2   </span></code></pre></td></tr></table></div></figure>


<p>And we use a <em>tricky</em> charactor map which starts from &lsquo;Z&rsquo;.</p>

<figure class='code'><figcaption><span>Excel Sheet Column Title</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Cpp'><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">convertToTitle</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">map</span> <span class="o">=</span> <span class="s">&quot;ZABCDEFGHIJKLMNOPQRSTUVWXY&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">=</span> <span class="n">map</span><span class="p">[</span><span class="n">n</span><span class="o">--</span> <span class="o">%</span> <span class="mi">26</span><span class="p">]</span> <span class="o">+</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">/=</span> <span class="mi">26</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSAPP] Data Lab]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/23/csapp-data-lab/"/>
    <updated>2015-03-23T16:34:31+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/23/csapp-data-lab</id>
    <content type="html"><![CDATA[<p>Data Lab: Manipulating Bits</p>

<!--more-->


<figure class='code'><figcaption><span>bit.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * bitOr - x|y using only ~ and &amp; </span>
</span><span class='line'><span class="cm"> *   Example: bitOr(6, 5) = 7</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp;</span>
</span><span class='line'><span class="cm"> *   Max ops: 8</span>
</span><span class='line'><span class="cm"> *   Rating: 1</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitOr</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">~</span><span class="p">((</span><span class="o">~</span><span class="n">x</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * anyOddBit - return 1 if any odd-numbered bit in word set to 1</span>
</span><span class='line'><span class="cm"> *   Examples anyOddBit(0x5) = 0, anyOddBit(0x7) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 12</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">anyOddBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">16</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">64</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">256</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">1024</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span><span class="o">&amp;</span><span class="mi">1073741824</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * copyLSB - set all bits of result to least significant bit of x</span>
</span><span class='line'><span class="cm"> *   Example: copyLSB(5) = 0xFFFFFFFF, copyLSB(6) = 0x00000000</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 5</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">copyLSB</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * bitMask - Generate a mask consisting of all 1&#39;s </span>
</span><span class='line'><span class="cm"> *   lowbit and highbit</span>
</span><span class='line'><span class="cm"> *   Examples: bitMask(5,3) = 0x38</span>
</span><span class='line'><span class="cm"> *   Assume 0 &lt;= lowbit &lt;= 31, and 0 &lt;= highbit &lt;= 31</span>
</span><span class='line'><span class="cm"> *   If lowbit &gt; highbit, then mask should be all 0&#39;s</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 16</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitMask</span><span class="p">(</span><span class="kt">int</span> <span class="n">highbit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">lowbit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mask1</span> <span class="o">=</span> <span class="o">~</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">highbit</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mask2</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="o">~</span><span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">lowbit</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mask3</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">highbit</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mask1</span> <span class="o">=</span> <span class="n">mask1</span> <span class="o">&amp;</span> <span class="n">mask3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">~</span><span class="p">(</span><span class="n">mask1</span> <span class="o">|</span> <span class="n">mask2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * reverseBytes - reverse the bytes of x</span>
</span><span class='line'><span class="cm"> *   Example: reverseBytes(0x01020304) = 0x04030201</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 25</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">reverseBytes</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newbyte0</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newbyte1</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff00</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newbyte2</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0xff</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newbyte3</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">newbyte0</span> <span class="o">|</span> <span class="n">newbyte1</span> <span class="o">|</span> <span class="n">newbyte2</span> <span class="o">|</span> <span class="n">newbyte3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * conditional - same as x ? y : z </span>
</span><span class='line'><span class="cm"> *   Example: conditional(2,4,5) = 4</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 16</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">conditional</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(((</span><span class="o">!</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="n">num</span><span class="p">)</span><span class="o">&amp;</span><span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="o">~</span><span class="p">((</span><span class="o">!</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="n">num</span><span class="p">))</span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * bang - Compute !x without using !</span>
</span><span class='line'><span class="cm"> *   Examples: bang(3) = 0, bang(0) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 12</span>
</span><span class='line'><span class="cm"> *   Rating: 4 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bang</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="p">)</span> <span class="o">|</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">|</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span> <span class="p">)</span> <span class="o">|</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">|</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">~</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * isTmax - returns 1 if x is the maximum, two&#39;s complement number,</span>
</span><span class='line'><span class="cm"> *     and 0 otherwise </span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | +</span>
</span><span class='line'><span class="cm"> *   Max ops: 10</span>
</span><span class='line'><span class="cm"> *   Rating: 1</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isTmax</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * fitsBits - return 1 if x can be represented as an </span>
</span><span class='line'><span class="cm"> *  n-bit, two&#39;s complement integer.</span>
</span><span class='line'><span class="cm"> *   1 &lt;= n &lt;= 32</span>
</span><span class='line'><span class="cm"> *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 15</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">fitsBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(((</span><span class="o">~</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">mask</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="o">~</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * isNotEqual - return 0 if x == y, and 1 otherwise </span>
</span><span class='line'><span class="cm"> *   Examples: isNotEqual(5,5) = 0, isNotEqual(4,5) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 6</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isNotEqual</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * logicalShift - shift x to the right by n, using a logical shift</span>
</span><span class='line'><span class="cm"> *   Can assume that 0 &lt;= n &lt;= 31</span>
</span><span class='line'><span class="cm"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 20</span>
</span><span class='line'><span class="cm"> *   Rating: 3 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">logicalShift</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="mh">0x1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">,</span> <span class="n">two</span><span class="p">,</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">two</span> <span class="o">=</span> <span class="n">one</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">three</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="n">two</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * rotateLeft - Rotate x to the left by n</span>
</span><span class='line'><span class="cm"> *   Can assume that 0 &lt;= n &lt;= 31</span>
</span><span class='line'><span class="cm"> *   Examples: rotateLeft(0x87654321,4) = 0x76543218</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 25</span>
</span><span class='line'><span class="cm"> *   Rating: 3 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">rotateLeft</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">n</span><span class="p">))</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#39;0&#39; to &#39;9&#39;)</span>
</span><span class='line'><span class="cm"> *   Example: isAsciiDigit(0x35) = 1.</span>
</span><span class='line'><span class="cm"> *            isAsciiDigit(0x3a) = 0.</span>
</span><span class='line'><span class="cm"> *            isAsciiDigit(0x05) = 0.</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 15</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isAsciiDigit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">))</span><span class="o">&amp;</span><span class="p">((</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * absVal - absolute value of x</span>
</span><span class='line'><span class="cm"> *   Example: absVal(-1) = 1.</span>
</span><span class='line'><span class="cm"> *   You may assume -TMax &lt;= x &lt;= TMax</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 10</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">absVal</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">&gt;&gt;</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="o">~</span><span class="n">z</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="n">z</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span><span class="o">=</span> <span class="n">x</span><span class="o">&gt;&gt;</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">+</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * isNonZero - Check whether x is nonzero using</span>
</span><span class='line'><span class="cm"> *              the legal operators except !</span>
</span><span class='line'><span class="cm"> *   Examples: isNonZero(3) = 1, isNonZero(0) = 0</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 10</span>
</span><span class='line'><span class="cm"> *   Rating: 4 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isNonZero</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * bitAnd - x&amp;y using only ~ and | </span>
</span><span class='line'><span class="cm"> *   Example: bitAnd(6, 5) = 4</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ |</span>
</span><span class='line'><span class="cm"> *   Max ops: 8</span>
</span><span class='line'><span class="cm"> *   Rating: 1</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitAnd</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">~</span><span class="p">(</span><span class="o">~</span><span class="n">x</span> <span class="o">|</span> <span class="o">~</span><span class="n">y</span><span class="p">);</span>  <span class="c1">//Using De Morgan&#39;s law</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * getByte - Extract byte n from word x</span>
</span><span class='line'><span class="cm"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span>
</span><span class='line'><span class="cm"> *   Examples: getByte(0x12345678,1) = 0x56</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 6</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">getByte</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   *First we rightshift x (fine if you like to leftshift :D)</span>
</span><span class='line'><span class="cm">   *Then use &amp;0 to clear the part we don&#39;t need</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * logicalShift - shift x to the right by n, using a logical shift</span>
</span><span class='line'><span class="cm"> *   Can assume that 0 &lt;= n &lt;= 31</span>
</span><span class='line'><span class="cm"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 20</span>
</span><span class='line'><span class="cm"> *   Rating: 3 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">logicalShift</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   *All we need to do is to clear the sign bit after shifting</span>
</span><span class='line'><span class="cm">   *So we build a mask to make sure that the sign bit of (x&gt;&gt;n) is always 0</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="o">~</span><span class="p">(((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">//set 1 for the hightest digit</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * bitCount - returns count of number of 1&#39;s in word</span>
</span><span class='line'><span class="cm"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 40</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitCount</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask1</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x55</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x55</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x55</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x55</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span> <span class="c1">//  mask1=0x55555555</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask2</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x33</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x33</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x33</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x33</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span> <span class="c1">//  mask2=0x33333333</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask3</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x0f</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x0f</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x0f</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x0f</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span> <span class="c1">//  mask3=0x0f0f0f0f</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask4</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0xff</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0xff</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>  <span class="c1">//  mask4=0x00ff00ff</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mask5</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0xff</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0xff</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">);</span>  <span class="c1">// mask5=0x0000ffff</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   *result = (mask1 &amp; x) + (mask1 &amp; (x &gt;&gt; 1));  //  add every 2 bits</span>
</span><span class='line'><span class="cm">   *result = (mask2 &amp; result) + (mask2 &amp; (result &gt;&gt; 2));  //  add every 4 bits</span>
</span><span class='line'><span class="cm">   *result = (mask3 &amp; result) + (mask3 &amp; (result &gt;&gt; 4));  //  add every 8 bits</span>
</span><span class='line'><span class="cm">   *result = (mask4 &amp; result) + (mask4 &amp; (result &gt;&gt; 8));  //  add every 16 bits</span>
</span><span class='line'><span class="cm">   *result = (mask5 &amp; result) + (mask5 &amp; (result &gt;&gt; 16)); //  add every 32 bits</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">mask1</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">&amp;</span> <span class="n">mask2</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">+</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&amp;</span> <span class="n">mask3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">+</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">))</span> <span class="o">&amp;</span> <span class="n">mask4</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">+</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">&amp;</span> <span class="n">mask5</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * bang - Compute !x without using !</span>
</span><span class='line'><span class="cm"> *   Examples: bang(3) = 0, bang(0) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 12</span>
</span><span class='line'><span class="cm"> *   Rating: 4 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bang</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">~</span><span class="p">((</span><span class="n">x</span> <span class="o">|</span> <span class="p">(</span><span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * tmin - return minimum two&#39;s complement integer </span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 4</span>
</span><span class='line'><span class="cm"> *   Rating: 1</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">tmin</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * fitsBits - return 1 if x can be represented as an </span>
</span><span class='line'><span class="cm"> *  n-bit, two&#39;s complement integer.</span>
</span><span class='line'><span class="cm"> *   1 &lt;= n &lt;= 32</span>
</span><span class='line'><span class="cm"> *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 15</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">fitsBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/* if x can be represented as an n-bit, two&#39;s complement integer,</span>
</span><span class='line'><span class="cm">   * then high 32-n+1 bits are all 0s or 1s.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="o">~</span><span class="mi">0</span><span class="p">);</span>  <span class="cm">/* x &gt;&gt; n-1, ~0 to get -1 */</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30</span>
</span><span class='line'><span class="cm"> *  Round toward zero</span>
</span><span class='line'><span class="cm"> *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 15</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">divpwr2</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span> <span class="cm">/* get sign */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">+</span> <span class="o">~</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lowbits</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">+</span> <span class="p">(((</span><span class="o">!</span><span class="n">lowbits</span><span class="p">)</span> <span class="o">^</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">sign</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * negate - return -x </span>
</span><span class='line'><span class="cm"> *   Example: negate(1) = -1.</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 5</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">negate</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * isPositive - return 1 if x &gt; 0, return 0 otherwise </span>
</span><span class='line'><span class="cm"> *   Example: isPositive(-1) = 0.</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 8</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isPositive</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">|</span> <span class="o">!</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span>
</span><span class='line'><span class="cm"> *   Example: isLessOrEqual(4,5) = 1.</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 24</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isLessOrEqual</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="cm">/*  z = y - x  */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">signx</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">signy</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">signz</span> <span class="o">=</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*  (x &lt; 0 and y &gt;= 0)  and  (x * y &gt;= 0 and x &lt;= y)  */</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="n">signx</span> <span class="o">^</span> <span class="n">signy</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">signx</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">signx</span> <span class="o">^</span> <span class="n">signy</span> <span class="o">^</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">!</span><span class="n">signz</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span>
</span><span class='line'><span class="cm"> *   Example: ilog2(16) = 4</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 90</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ilog2</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*  while (x) x /= 2;</span>
</span><span class='line'><span class="cm">   *  use dichotomy to calculate the sum of 0s</span>
</span><span class='line'><span class="cm">   *  if there&#39;re x 0s on the left then shiftleft x bits</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x3</span><span class="p">,</span> <span class="n">x4</span><span class="p">,</span> <span class="n">x5</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">x1</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="mi">16</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">16</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x2</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x3</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x4</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">!</span><span class="n">x4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="n">x5</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">!</span><span class="n">x5</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">31</span> <span class="o">+</span> <span class="o">~</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>  <span class="cm">/* 32 - (n + 1) */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * float_neg - Return bit-level equivalent of expression -f for</span>
</span><span class='line'><span class="cm"> *   floating point argument f.</span>
</span><span class='line'><span class="cm"> *   Both the argument and result are passed as unsigned int&#39;s, but</span>
</span><span class='line'><span class="cm"> *   they are to be interpreted as the bit-level representations of</span>
</span><span class='line'><span class="cm"> *   single-precision floating point values.</span>
</span><span class='line'><span class="cm"> *   When argument is NaN, return argument.</span>
</span><span class='line'><span class="cm"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span>
</span><span class='line'><span class="cm"> *   Max ops: 10</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">float_neg</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">uf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="mh">0x7fffffff</span><span class="p">;</span>  <span class="cm">/* remove sign bit */</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">^</span> <span class="mh">0x80000000</span><span class="p">;</span> <span class="cm">/* change sign bit */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">tmp</span> <span class="o">&gt;</span> <span class="mh">0x7f800000</span><span class="p">)</span>  <span class="cm">/* NaN */</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">uf</span><span class="p">;</span>
</span><span class='line'> <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * float_i2f - Return bit-level equivalent of expression (float) x</span>
</span><span class='line'><span class="cm"> *   Result is returned as unsigned int, but</span>
</span><span class='line'><span class="cm"> *   it is to be interpreted as the bit-level representation of a</span>
</span><span class='line'><span class="cm"> *   single-precision floating point values.</span>
</span><span class='line'><span class="cm"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span>
</span><span class='line'><span class="cm"> *   Max ops: 30</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">float_i2f</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">shiftLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">afterShift</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">abs_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">sign</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* special case */</span>
</span><span class='line'>  <span class="cm">/* get sign and abs for negative x */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">sign</span> <span class="o">=</span> <span class="mh">0x80000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">abs_x</span> <span class="o">=</span> <span class="o">-</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">afterShift</span> <span class="o">=</span> <span class="n">abs_x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">afterShift</span><span class="p">;</span>
</span><span class='line'>    <span class="n">afterShift</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shiftLeft</span><span class="o">++</span><span class="p">;</span>  <span class="cm">/* count shiftleft */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&amp;</span> <span class="mh">0x80000000</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">afterShift</span> <span class="o">&amp;</span> <span class="mh">0x01ff</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mh">0x0100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">afterShift</span> <span class="o">&amp;</span> <span class="mh">0x03ff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0300</span><span class="p">)</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* construct the float expression */</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sign</span> <span class="o">+</span> <span class="p">(</span><span class="n">afterShift</span> <span class="o">&gt;&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="mi">159</span> <span class="o">-</span> <span class="n">shiftLeft</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">)</span> <span class="o">+</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * float_twice - Return bit-level equivalent of expression 2*f for</span>
</span><span class='line'><span class="cm"> *   floating point argument f.</span>
</span><span class='line'><span class="cm"> *   Both the argument and result are passed as unsigned int&#39;s, but</span>
</span><span class='line'><span class="cm"> *   they are to be interpreted as the bit-level representation of</span>
</span><span class='line'><span class="cm"> *   single-precision floating point values.</span>
</span><span class='line'><span class="cm"> *   When argument is NaN, return argument</span>
</span><span class='line'><span class="cm"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span>
</span><span class='line'><span class="cm"> *   Max ops: 30</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">float_twice</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">uf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">f</span> <span class="o">=</span> <span class="n">uf</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* Compute 2*f. If f is NaN, then return f */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">f</span> <span class="o">&amp;</span> <span class="mh">0x7F800000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="p">((</span><span class="n">f</span> <span class="o">&amp;</span> <span class="mh">0x007FFFFF</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mh">0x80000000</span> <span class="o">&amp;</span> <span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">f</span> <span class="o">&amp;</span> <span class="mh">0x7F800000</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x7F800000</span><span class="p">)</span> <span class="cm">/* exp can be extended */</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span><span class="n">f</span><span class="o">+</span><span class="mh">0x00800000</span><span class="p">;</span>  <span class="cm">/* exp + 1 */</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * bitNor - ~(x|y) using only ~ and &amp;</span>
</span><span class='line'><span class="cm"> *   Example: bitNor(0x6, 0x5) = 0xFFFFFFF8</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp;</span>
</span><span class='line'><span class="cm"> *   Max ops: 8</span>
</span><span class='line'><span class="cm"> *   Rating: 1</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitNor</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">~</span><span class="n">x</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * bitXor - x^y using only ~ and &amp;</span>
</span><span class='line'><span class="cm"> *   Example: bitXor(4, 5) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ~ &amp;</span>
</span><span class='line'><span class="cm"> *   Max ops: 14</span>
</span><span class='line'><span class="cm"> *   Rating: 2</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bitXor</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="p">(</span><span class="o">~</span><span class="n">x</span><span class="p">)</span><span class="o">&amp;</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">x</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">~</span><span class="p">(</span><span class="o">~</span><span class="n">a</span><span class="o">&amp;~</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * leastBitPos - return a mask that marks the position of the</span>
</span><span class='line'><span class="cm"> *               least significant 1 bit. If x == 0, return 0</span>
</span><span class='line'><span class="cm"> *   Example: leastBitPos(96) = 0x20</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 6</span>
</span><span class='line'><span class="cm"> *   Rating: 4</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">leastBitPos</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * isNonNegative - return 1 if x &gt;= 0, return 0 otherwise</span>
</span><span class='line'><span class="cm"> *   Example: isNonNegative(-1) = 0.  isNonNegative(0) = 1.</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 6</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isNonNegative</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">((</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="mi">31</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0x01</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * isGreater - if x &gt; y  then return 1, else return 0</span>
</span><span class='line'><span class="cm"> *   Example: isGreater(4,5) = 0, isGreater(5,4) = 1</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 24</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">isGreater</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signofx</span><span class="o">=</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signofy</span><span class="o">=</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signequal</span><span class="o">=</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">signofx</span> <span class="o">^</span> <span class="n">signofy</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">((</span><span class="o">~</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signnequal</span><span class="o">=</span><span class="n">signofx</span> <span class="o">&amp;</span> <span class="o">!</span><span class="n">signofy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">signequal</span> <span class="o">|</span> <span class="n">signnequal</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * addOK - Determine if can compute x+y without overflow</span>
</span><span class='line'><span class="cm"> *   Example: addOK(0x80000000,0x80000000) = 0,</span>
</span><span class='line'><span class="cm"> *            addOK(0x80000000,0x70000000) = 1,</span>
</span><span class='line'><span class="cm"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span>
</span><span class='line'><span class="cm"> *   Max ops: 20</span>
</span><span class='line'><span class="cm"> *   Rating: 3</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">addOK</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">xysum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">signsumxy</span> <span class="o">=</span> <span class="n">xysum</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="n">signx</span> <span class="o">^</span> <span class="n">signy</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">signx</span> <span class="o">^</span> <span class="n">signsumxy</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Climbing Stairs]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs/"/>
    <updated>2015-03-20T20:01:00+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs</id>
    <content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p>

<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>

<!--more-->




<figure class='code'><figcaption><span>Climbing Stairs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">stepOne</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">stepTwo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">stepOne</span> <span class="o">+</span> <span class="n">stepTwo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">stepTwo</span> <span class="o">=</span> <span class="n">stepOne</span><span class="p">;</span>
</span><span class='line'>        <span class="n">stepOne</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Majority Element]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element/"/>
    <updated>2015-03-20T19:57:22+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element</id>
    <content type="html"><![CDATA[<p>Given an array of size n, find the majority element. The majority element is the element that appears more than <em>⌊ n/2 ⌋</em> times.</p>

<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>

<!--more-->




<figure class='code'><figcaption><span>Majority Element</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">intcomp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">a</span> <span class="o">-</span> <span class="o">*</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">majorityElement</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">qsort</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">intcomp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">num</span><span class="p">[</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Compare Version Numbers]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers/"/>
    <updated>2015-03-20T19:27:39+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers</id>
    <content type="html"><![CDATA[<p>Compare two version numbers version1 and version2.  <br/>
If version1 > version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.</p>

<p>You may assume that the version strings are non-empty and contain only digits and the . character.   <br/>
The <code>.</code> character does not represent a decimal point and is used to separate number sequences.  <br/>
For instance, <code>2.5</code> is not &ldquo;two and a half&rdquo; or &ldquo;half way to version three&rdquo;, it is the fifth second-level revision of the second first-level revision.</p>

<p>Here is an example of version numbers ordering: <br/>
<code>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</code></p>

<!--more-->




<figure class='code'><figcaption><span>compareVersion</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span> <span class="nf">compareVersion</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">version1</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">version2</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">v1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">p1</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">version1</span><span class="p">)</span> <span class="o">||</span> <span class="n">p2</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">version2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">v1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p1</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">version1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">version1</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">++</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">v1</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">v1</span> <span class="o">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">version1</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">++</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">v2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p2</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">version2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">version2</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">++</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">v2</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">version2</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="o">++</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">v1</span> <span class="o">&lt;</span> <span class="n">v2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v1</span> <span class="o">&gt;</span> <span class="n">v2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixed: ARD cannot connect to Ubuntu 14.04]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/02/12/fixed-ard-cannot-connect-to-ubuntu-14-dot-04/"/>
    <updated>2015-02-12T16:53:28+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/02/12/fixed-ard-cannot-connect-to-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been so far using <a href="http://www.realvnc.com">RealVNC</a> as VNC client. It&rsquo;s perfect except one thing - the icon.<br/>
The original icon appears really big when standing on dock. I even resized it to make the icon look <em>normal</em>.</p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-12-dock.png" alt="dock" /></p>

<!--more-->


<p>But what about the OS X&rsquo;s built-in <em>Screen Sharing</em>? Well, here comes the problems.</p>

<blockquote><p>Connection failed to “XXX&rsquo;s remote desktop on XXX”. The software on the remote computer appears to be incompatible with this version of Screen Sharing.</p></blockquote>

<p>This message was showing up again and again when I tried to connect to a server running Ubuntu 14.04.<br/>
I&rsquo;ve set up everything as usual (port, encryption, firewall &hellip;). Finally I made it work.</p>

<p>In fact this issue was caused by a <a href="https://bugs.launchpad.net/ubuntu/+source/vino/+bug/1281250">BUG</a> introduced into <a href="https://wiki.gnome.org/Projects/Vino">Vino</a> (Default VNC server for GNOME).</p>

<h4>Here&rsquo;s the solution:</h4>

<ul>
<li>Make sure <code>Desktop Sharing</code> has been set up properly.</li>
<li>Install <code>gconf-tools</code>. e.g. &lsquo;sudo apt-get install dconf-tools&rsquo;</li>
<li>Run <code>dconf-Editor</code>.</li>
<li>Expand &lsquo;org&rsquo;</li>
<li>Expand &lsquo;gnome&rsquo;</li>
<li>Expand &lsquo;Desktop&rsquo;</li>
<li>Select &lsquo;Remote Access&rsquo;</li>
<li>Uncheck &lsquo;Require Encrption&rsquo;</li>
</ul>


<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-12-Ubuntu-setting.png" alt="Desktop-Sharing-setting" /></p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-12-gconf-Editor.png" alt="gconf-Editor" /></p>

<p>Now you can connect to the server using built-in <em>Screen Sharing</em> or <em>Apple Remote Desktop</em>.</p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-12-Screen-Sharing.png" alt="Screen Sharing" /></p>

<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-12-ARD.png" alt="Apple Remote Desktop" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, fatal: The remote end hung up unexpectedly]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/02/03/git/"/>
    <updated>2015-02-03T16:38:18+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/02/03/git</id>
    <content type="html"><![CDATA[<p>Didn&rsquo;t expect that this would be my first post except the one for testing.😉</p>

<p>So there was a problem when I had changed the blog theme and tried to <code>rake deploy</code>.</p>

<!--more-->


<p><img src="http://sumomoshinqi.github.io/images/posts/2015-02-03-git.png" alt="problem" /></p>

<p>Then I looked up stackoverflow and found it was due to git/https buffer settings, which means the size of my <strong>push</strong> was larger than the buffer size. In order to solve it, simply <code>git config http.postBuffer 524288000</code> and it just worked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/02/03/test-post/"/>
    <updated>2015-02-03T16:36:18+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/02/03/test-post</id>
    <content type="html"><![CDATA[<p>Testing post</p>

<p>中文显示测试</p>

<p>😄😂 Emoji testing</p>

<!--more-->


<p><strong>Code snippets testing:</strong></p>

<p>Syntax:</p>

<pre><code>``` [language] [title] [url] [link text]
code snippet
```  
</code></pre>

<p>Sample:</p>

<figure class='code'><figcaption><span>Simple shell written in C</span><a href='https://gist.github.com/sumomoshinqi/c0e8ceba3510877a6ecd'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/* Compile with: g++ -Wall –Werror -o shell shell.c */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* The array below will hold the arguments: args[0] is the command. */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span><span class="o">*</span> <span class="n">args</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'><span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">command_pipe</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define READ  0</span>
</span><span class='line'><span class="cp">#define WRITE 1</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Handle commands separatly</span>
</span><span class='line'><span class="cm"> * input: return value from previous command (useful for pipe file descriptor)</span>
</span><span class='line'><span class="cm"> * first: 1 if first command in pipe-sequence (no input from previous pipe)</span>
</span><span class='line'><span class="cm"> * last: 1 if last command in pipe-sequence (no input from previous pipe)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * EXAMPLE: If you type &quot;ls | grep shell | wc&quot; in your shell:</span>
</span><span class='line'><span class="cm"> *    fd1 = command(0, 1, 0), with args[0] = &quot;ls&quot;</span>
</span><span class='line'><span class="cm"> *    fd2 = command(fd1, 0, 0), with args[0] = &quot;grep&quot; and args[1] = &quot;shell&quot;</span>
</span><span class='line'><span class="cm"> *    fd3 = command(fd2, 0, 1), with args[0] = &quot;wc&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * So if &#39;command&#39; returns a file descriptor, the next &#39;command&#39; has this</span>
</span><span class='line'><span class="cm"> * descriptor as its &#39;input&#39;.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">command</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">,</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pipettes</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Invoke pipe */</span>
</span><span class='line'>  <span class="n">pipe</span><span class="p">(</span> <span class="n">pipettes</span> <span class="p">);</span>   
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  SCHEME:</span>
</span><span class='line'><span class="cm">     STDIN --&gt; O --&gt; O --&gt; O --&gt; STDOUT</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">first</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">last</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">input</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// First command</span>
</span><span class='line'>          <span class="n">dup2</span><span class="p">(</span> <span class="n">pipettes</span><span class="p">[</span><span class="n">WRITE</span><span class="p">],</span> <span class="n">STDOUT_FILENO</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">first</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">last</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">input</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Middle command</span>
</span><span class='line'>          <span class="n">dup2</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">);</span>
</span><span class='line'>          <span class="n">dup2</span><span class="p">(</span><span class="n">pipettes</span><span class="p">[</span><span class="n">WRITE</span><span class="p">],</span> <span class="n">STDOUT_FILENO</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Last command</span>
</span><span class='line'>          <span class="n">dup2</span><span class="p">(</span> <span class="n">input</span><span class="p">,</span> <span class="n">STDIN_FILENO</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">execvp</span><span class="p">(</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="n">_exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span> <span class="c1">// If child fails</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Nothing more needs to be written</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">pipettes</span><span class="p">[</span><span class="n">WRITE</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If it&#39;s the last command, nothing more needs to be read</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">last</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">pipettes</span><span class="p">[</span><span class="n">READ</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">pipettes</span><span class="p">[</span><span class="n">READ</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Final cleanup, &#39;wait&#39; for processes to terminate.</span>
</span><span class='line'><span class="cm"> *  n : Number of times &#39;command&#39; was invoked.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">cleanup</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">run</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">cmd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">input</span><span class="p">,</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* number of calls to &#39;command&#39; */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;SIMPLE SHELL: Type &#39;exit&#39; or send EOF to exit.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Print the command prompt */</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;$&gt; &quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Read a command line */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">stdin</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">char</span><span class="o">*</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">char</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="sc">&#39;|&#39;</span><span class="p">);</span> <span class="cm">/* Find first &#39;|&#39; */</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* &#39;next&#39; points to &#39;|&#39; */</span>
</span><span class='line'>          <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">input</span> <span class="o">=</span> <span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">=</span> <span class="n">next</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">next</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="sc">&#39;|&#39;</span><span class="p">);</span> <span class="cm">/* Find next &#39;|&#39; */</span>
</span><span class='line'>          <span class="n">first</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">input</span> <span class="o">=</span> <span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cleanup</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">split</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">run</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">cmd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">input</span><span class="p">,</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">split</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;exit&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">command</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">skipwhite</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">isspace</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">))</span> <span class="o">++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">split</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cmd</span> <span class="o">=</span> <span class="n">skipwhite</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="n">skipwhite</span><span class="p">(</span><span class="n">next</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
