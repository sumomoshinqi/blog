<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c | sumomoshinqi]]></title>
  <link href="http://sumomoshinqi.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://sumomoshinqi.github.io/"/>
  <updated>2015-05-05T14:20:32+08:00</updated>
  <id>http://sumomoshinqi.github.io/</id>
  <author>
    <name><![CDATA[sumomoshinqi]]></name>
    <email><![CDATA[edam.lqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Jam Qualification Round 2015]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/04/12/code-jam-qualification-round-2015/"/>
    <updated>2015-04-12T13:56:09+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/04/12/code-jam-qualification-round-2015</id>
    <content type="html"><![CDATA[<h4>Problem A. Standing Ovation</h4>

<p>Problem</p>

<p>It&rsquo;s opening night at the opera, and your friend is the prima donna (the lead female singer). You will not be in the audience, but you want to make sure she receives a standing ovation &ndash; with every audience member standing up and clapping their hands for her.</p>

<!--more-->


<p>Initially, the entire audience is seated. Everyone in the audience has a shyness level. An audience member with shyness level <em>Si</em> will wait until at least <em>Si</em> other audience members have already stood up to clap, and if so, she will immediately stand up and clap. If <em>Si</em> = 0, then the audience member will always stand up and clap immediately, regardless of what anyone else does. For example, an audience member with <em>Si</em> = 2 will be seated at the beginning, but will stand up to clap later after she sees at least two other people standing and clapping.</p>

<p>You know the shyness level of everyone in the audience, and you are prepared to invite additional friends of the prima donna to be in the audience to ensure that everyone in the crowd stands up and claps in the end. Each of these friends may have any shyness value that you wish, not necessarily the same. What is the minimum number of friends that you need to invite to guarantee a standing ovation?
Input</p>

<p>The first line of the input gives the number of test cases, <em>T</em>. <em>T</em> test cases follow. Each consists of one line with <em>Smax</em>, the maximum shyness level of the shyest person in the audience, followed by a string of <em>Smax</em> + 1 single digits. The <em>k</em>th digit of this string (counting starting from 0) represents how many people in the audience have shyness level <em>k</em>. For example, the string &ldquo;409&rdquo; would mean that there were four audience members with <em>Si</em> = 0 and nine audience members with <em>Si</em> = 2 (and none with <em>Si</em> = 1 or any other value). Note that there will initially always be between 0 and 9 people with each shyness level.</p>

<p>The string will never end in a 0. Note that this implies that there will always be at least one person in the audience.</p>

<p>Output</p>

<p>For each test case, output one line containing &ldquo;Case #x: y&rdquo;, where x is the test case number (starting from 1) and y is the minimum number of friends you must invite.</p>

<p>Limits</p>

<p>1 ≤ <em>T</em> ≤ 100.</p>

<p>Small dataset</p>

<p>0 ≤ <em>Smax</em> ≤ 6.</p>

<p>Large dataset</p>

<p>0 ≤ <em>Smax</em> ≤ 1000.</p>

<p>Sample
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Input       Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4           Case #1: 0
</span><span class='line'>4 11111     Case #2: 1
</span><span class='line'>1 09        Case #3: 2
</span><span class='line'>5 110011    Case #4: 0
</span><span class='line'>0 1
</span></code></pre></td></tr></table></div></figure></p>

<p>In Case #1, the audience will eventually produce a standing ovation on its own, without you needing to add anyone &ndash; first the audience member with <em>Si</em> = 0 will stand up, then the audience member with <em>Si</em> = 1 will stand up, etc.</p>

<p>In Case #2, a friend with <em>Si</em> = 0 must be invited, but that is enough to get the entire audience to stand up.</p>

<p>In Case #3, one optimal solution is to add two audience members with <em>Si</em> = 2.</p>

<p>In Case #4, there is only one audience member and he will stand up immediately. No friends need to be invited.</p>

<p>Solution
<figure class='code'><figcaption><span>A-small.c</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">Smax</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">shy</span><span class="p">,</span> <span class="n">addon</span><span class="p">,</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;A-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">stand</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">addon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %s&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Smax</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">Smax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">shy</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">stand</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">stand</span> <span class="o">+=</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">shy</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="n">addon</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>            <span class="n">stand</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">addon</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span> <span class="n">A</span><span class="o">-</span><span class="n">large</span><span class="p">.</span><span class="n">c</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">Smax</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">shy</span><span class="p">,</span> <span class="n">addon</span><span class="p">,</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">1005</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;A-large.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">stand</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">addon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %s&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Smax</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">Smax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">shy</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">stand</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">stand</span> <span class="o">+=</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">shy</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="n">addon</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">stand</span><span class="p">;</span>
</span><span class='line'>            <span class="n">stand</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">shy</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">addon</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;---</span>
</span><span class='line'>
</span><span class='line'><span class="cp">####Problem B. Infinite House of Pancakes</span>
</span><span class='line'><span class="n">Problem</span>
</span><span class='line'>
</span><span class='line'><span class="n">At</span> <span class="n">the</span> <span class="n">Infinite</span> <span class="n">House</span> <span class="n">of</span> <span class="n">Pancakes</span><span class="p">,</span> <span class="n">there</span> <span class="n">are</span> <span class="n">only</span> <span class="n">finitely</span> <span class="n">many</span> <span class="n">pancakes</span><span class="p">,</span> <span class="n">but</span> <span class="n">there</span> <span class="n">are</span> <span class="n">infinitely</span> <span class="n">many</span> <span class="n">diners</span> <span class="n">who</span> <span class="n">would</span> <span class="n">be</span> <span class="n">willing</span> <span class="n">to</span> <span class="n">eat</span> <span class="n">them</span><span class="o">!</span> <span class="n">When</span> <span class="n">the</span> <span class="n">restaurant</span> <span class="n">opens</span> <span class="k">for</span> <span class="n">breakfast</span><span class="p">,</span> <span class="n">among</span> <span class="n">the</span> <span class="n">infinitely</span> <span class="n">many</span> <span class="n">diners</span><span class="p">,</span> <span class="n">exactly</span> <span class="o">*</span><span class="n">D</span><span class="o">*</span> <span class="n">have</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">plates</span><span class="p">;</span> <span class="n">the</span> <span class="n">ith</span> <span class="n">of</span> <span class="n">these</span> <span class="n">has</span> <span class="o">*</span><span class="n">Pi</span><span class="o">*</span> <span class="n">pancakes</span> <span class="n">on</span> <span class="n">his</span> <span class="n">or</span> <span class="n">her</span> <span class="n">plate</span><span class="p">.</span> <span class="n">Everyone</span> <span class="k">else</span> <span class="n">has</span> <span class="n">an</span> <span class="n">empty</span> <span class="n">plate</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Normally</span><span class="p">,</span> <span class="n">every</span> <span class="n">minute</span><span class="p">,</span> <span class="n">every</span> <span class="n">diner</span> <span class="n">with</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">plate</span> <span class="n">will</span> <span class="n">eat</span> <span class="n">one</span> <span class="n">pancake</span> <span class="n">from</span> <span class="n">his</span> <span class="n">or</span> <span class="n">her</span> <span class="n">plate</span><span class="p">.</span> <span class="n">However</span><span class="p">,</span> <span class="n">some</span> <span class="n">minutes</span> <span class="n">may</span> <span class="n">be</span> <span class="n">special</span><span class="p">.</span> <span class="n">In</span> <span class="n">a</span> <span class="n">special</span> <span class="n">minute</span><span class="p">,</span> <span class="n">the</span> <span class="n">head</span> <span class="n">server</span> <span class="n">asks</span> <span class="k">for</span> <span class="n">the</span> <span class="n">diners</span><span class="err">&#39;</span> <span class="n">attention</span><span class="p">,</span> <span class="n">chooses</span> <span class="n">a</span> <span class="n">diner</span> <span class="n">with</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">plate</span><span class="p">,</span> <span class="n">and</span> <span class="n">carefully</span> <span class="n">lifts</span> <span class="n">some</span> <span class="n">number</span> <span class="n">of</span> <span class="n">pancakes</span> <span class="n">off</span> <span class="n">of</span> <span class="n">that</span> <span class="n">diner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">plate</span> <span class="n">and</span> <span class="n">moves</span> <span class="n">those</span> <span class="n">pancakes</span> <span class="n">onto</span> <span class="n">one</span> <span class="n">other</span> <span class="n">diner</span><span class="err">&#39;</span><span class="n">s</span> <span class="p">(</span><span class="n">empty</span> <span class="n">or</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">)</span> <span class="n">plate</span><span class="p">.</span> <span class="n">No</span> <span class="n">diners</span> <span class="n">eat</span> <span class="n">during</span> <span class="n">a</span> <span class="n">special</span> <span class="n">minute</span><span class="p">,</span> <span class="n">because</span> <span class="n">it</span> <span class="n">would</span> <span class="n">be</span> <span class="n">rude</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">You</span> <span class="n">are</span> <span class="n">the</span> <span class="n">head</span> <span class="n">server</span> <span class="n">on</span> <span class="n">duty</span> <span class="n">this</span> <span class="n">morning</span><span class="p">,</span> <span class="n">and</span> <span class="n">it</span> <span class="n">is</span> <span class="n">your</span> <span class="n">job</span> <span class="n">to</span> <span class="n">decide</span> <span class="n">which</span> <span class="n">minutes</span><span class="p">,</span> <span class="k">if</span> <span class="n">any</span><span class="p">,</span> <span class="n">will</span> <span class="n">be</span> <span class="n">special</span><span class="p">,</span> <span class="n">and</span> <span class="n">which</span> <span class="n">pancakes</span> <span class="n">will</span> <span class="n">move</span> <span class="n">where</span><span class="p">.</span> <span class="n">That</span> <span class="n">is</span><span class="p">,</span> <span class="n">every</span> <span class="n">minute</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">decide</span> <span class="n">to</span> <span class="n">either</span> <span class="k">do</span> <span class="n">nothing</span> <span class="n">and</span> <span class="n">let</span> <span class="n">the</span> <span class="n">diners</span> <span class="n">eat</span><span class="p">,</span> <span class="n">or</span> <span class="n">declare</span> <span class="n">a</span> <span class="n">special</span> <span class="n">minute</span> <span class="n">and</span> <span class="n">interrupt</span> <span class="n">the</span> <span class="n">diners</span> <span class="n">to</span> <span class="n">make</span> <span class="n">a</span> <span class="n">single</span> <span class="n">movement</span> <span class="n">of</span> <span class="n">one</span> <span class="n">or</span> <span class="n">more</span> <span class="n">pancakes</span><span class="p">,</span> <span class="n">as</span> <span class="n">described</span> <span class="n">above</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Breakfast</span> <span class="n">ends</span> <span class="n">when</span> <span class="n">there</span> <span class="n">are</span> <span class="n">no</span> <span class="n">more</span> <span class="n">pancakes</span> <span class="n">left</span> <span class="n">to</span> <span class="n">eat</span><span class="p">.</span> <span class="n">How</span> <span class="n">quickly</span> <span class="n">can</span> <span class="n">you</span> <span class="n">make</span> <span class="n">that</span> <span class="n">happen</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">Input</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">first</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="n">input</span> <span class="n">gives</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">test</span> <span class="n">cases</span><span class="p">,</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span><span class="p">.</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="n">test</span> <span class="n">cases</span> <span class="n">follow</span><span class="p">.</span> <span class="n">Each</span> <span class="n">consists</span> <span class="n">of</span> <span class="n">one</span> <span class="n">line</span> <span class="n">with</span> <span class="o">*</span><span class="n">D</span><span class="o">*</span><span class="p">,</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">diners</span> <span class="n">with</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">plates</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">another</span> <span class="n">line</span> <span class="n">with</span> <span class="o">*</span><span class="n">D</span><span class="o">*</span> <span class="n">space</span><span class="o">-</span><span class="n">separated</span> <span class="n">integers</span> <span class="n">representing</span> <span class="n">the</span> <span class="n">numbers</span> <span class="n">of</span> <span class="n">pancakes</span> <span class="n">on</span> <span class="n">those</span> <span class="n">diners</span><span class="err">&#39;</span> <span class="n">plates</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">each</span> <span class="n">test</span> <span class="k">case</span><span class="p">,</span> <span class="n">output</span> <span class="n">one</span> <span class="n">line</span> <span class="n">containing</span> <span class="s">&quot;Case #x: y&quot;</span><span class="p">,</span> <span class="n">where</span> <span class="n">x</span> <span class="n">is</span> <span class="n">the</span> <span class="n">test</span> <span class="k">case</span> <span class="n">number</span> <span class="p">(</span><span class="n">starting</span> <span class="n">from</span> <span class="mi">1</span><span class="p">)</span> <span class="n">and</span> <span class="n">y</span> <span class="n">is</span> <span class="n">the</span> <span class="n">smallest</span> <span class="n">number</span> <span class="n">of</span> <span class="n">minutes</span> <span class="n">needed</span> <span class="n">to</span> <span class="n">finish</span> <span class="n">the</span> <span class="n">breakfast</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Limits</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">100.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Small</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">D</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">6.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">Pi</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">9.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Large</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">D</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">1000.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">Pi</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">1000.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Input</span>       <span class="n">Output</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span>           <span class="n">Case</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">1</span>           <span class="n">Case</span> <span class="err">#</span><span class="mi">2</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>           <span class="n">Case</span> <span class="err">#</span><span class="mi">3</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>
In Case #1, one diner starts with 3 pancakes and everyone else&rsquo;s plate is empty. One optimal strategy is:</p>

<p>Minute 1: Do nothing. The diner will eat one pancake.</p>

<p>Minute 2 (special): Interrupt and move one pancake from that diner&rsquo;s stack onto another diner&rsquo;s empty plate. (Remember that there are always infinitely many diners with empty plates available, no matter how many diners start off with pancakes.) No pancakes are eaten during an interruption.</p>

<p>Minute 3: Do nothing. Each of those two diners will eat one of the last two remaining pancakes.</p>

<p>In Case #2, it is optimal to let the diners eat for 2 minutes, with no interruptions, during which time they will finish all the pancakes.</p>

<p>In Case #3, one diner starts with 4 pancakes and everyone else&rsquo;s plate is empty. It is optimal to use the first minute as a special minute to move two pancakes from the diner&rsquo;s plate to another diner&rsquo;s empty plate, and then do nothing and let the diners eat for the second and third minutes.</p>

<p>Solution<br/>
<figure class='code'><figcaption><span>B-small.c</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">P</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">D</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">max</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">ii</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Time</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxDiner</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newTime</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;B-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Time</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="o">++</span><span class="n">ii</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">+=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">ii</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">+=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">newTime</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Time</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Time</span> <span class="o">=</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">Time</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span> <span class="n">B</span><span class="o">-</span><span class="n">large</span><span class="p">.</span><span class="n">c</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">P</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">D</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">max</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">ii</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Time</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxDiner</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minj</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;B-large.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Time</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">P</span><span class="p">[</span><span class="n">max</span><span class="p">()];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">D</span><span class="p">;</span> <span class="o">++</span><span class="n">ii</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newTime</span> <span class="o">+=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">ii</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">newTime</span> <span class="o">+=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">newTime</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Time</span> <span class="o">=</span> <span class="n">newTime</span><span class="p">;</span>
</span><span class='line'>            <span class="n">minj</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">Time</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//printf(&quot;Case #%d: %d   minj = %d\n&quot;, i+1, Time, minj);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;---</span>
</span><span class='line'>
</span><span class='line'><span class="cp">####Problem C. Dijkstra</span>
</span><span class='line'><span class="n">Problem</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">Dutch</span> <span class="n">computer</span> <span class="n">scientist</span> <span class="n">Edsger</span> <span class="n">Dijkstra</span> <span class="n">made</span> <span class="n">many</span> <span class="n">important</span> <span class="n">contributions</span> <span class="n">to</span> <span class="n">the</span> <span class="n">field</span><span class="p">,</span> <span class="n">including</span> <span class="n">the</span> <span class="n">shortest</span> <span class="n">path</span> <span class="n">finding</span> <span class="n">algorithm</span> <span class="n">that</span> <span class="n">bears</span> <span class="n">his</span> <span class="n">name</span><span class="p">.</span> <span class="n">This</span> <span class="n">problem</span> <span class="n">is</span> <span class="n">not</span> <span class="n">about</span> <span class="n">that</span> <span class="n">algorithm</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">You</span> <span class="n">were</span> <span class="n">marked</span> <span class="n">down</span> <span class="n">one</span> <span class="n">point</span> <span class="n">on</span> <span class="n">an</span> <span class="n">algorithms</span> <span class="n">exam</span> <span class="k">for</span> <span class="n">misspelling</span> <span class="s">&quot;Dijkstra&quot;</span> <span class="o">--</span> <span class="n">between</span> <span class="n">D</span> <span class="n">and</span> <span class="n">stra</span><span class="p">,</span> <span class="n">you</span> <span class="n">wrote</span> <span class="n">some</span> <span class="n">number</span> <span class="n">of</span> <span class="n">characters</span><span class="p">,</span> <span class="n">each</span> <span class="n">of</span> <span class="n">which</span> <span class="n">was</span> <span class="n">either</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">or</span> <span class="n">k</span><span class="p">.</span> <span class="n">You</span> <span class="n">are</span> <span class="n">prepared</span> <span class="n">to</span> <span class="n">argue</span> <span class="n">to</span> <span class="n">get</span> <span class="n">your</span> <span class="n">point</span> <span class="n">back</span> <span class="n">using</span> <span class="n">quaternions</span><span class="p">,</span> <span class="n">an</span> <span class="n">actual</span> <span class="n">number</span> <span class="n">system</span> <span class="p">(</span><span class="n">extended</span> <span class="n">from</span> <span class="n">complex</span> <span class="n">numbers</span><span class="p">)</span> <span class="n">with</span> <span class="n">the</span> <span class="n">following</span> <span class="n">multiplicative</span> <span class="nl">structure</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="p">[</span><span class="n">Dijkstra</span><span class="p">](</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="n">Dijkstra</span><span class="p">.</span><span class="n">jpeg</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">multiply</span> <span class="n">one</span> <span class="n">quaternion</span> <span class="n">by</span> <span class="n">another</span><span class="p">,</span> <span class="n">look</span> <span class="n">at</span> <span class="n">the</span> <span class="n">row</span> <span class="k">for</span> <span class="n">the</span> <span class="n">first</span> <span class="n">quaternion</span> <span class="n">and</span> <span class="n">the</span> <span class="n">column</span> <span class="k">for</span> <span class="n">the</span> <span class="n">second</span> <span class="n">quaternion</span><span class="p">.</span> <span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">to</span> <span class="n">multiply</span> <span class="n">i</span> <span class="n">by</span> <span class="n">j</span><span class="p">,</span> <span class="n">look</span> <span class="n">in</span> <span class="n">the</span> <span class="n">row</span> <span class="k">for</span> <span class="n">i</span> <span class="n">and</span> <span class="n">the</span> <span class="n">column</span> <span class="k">for</span> <span class="n">j</span> <span class="n">to</span> <span class="n">find</span> <span class="n">that</span> <span class="n">the</span> <span class="n">answer</span> <span class="n">is</span> <span class="n">k</span><span class="p">.</span> <span class="n">To</span> <span class="n">multiply</span> <span class="n">j</span> <span class="n">by</span> <span class="n">i</span><span class="p">,</span> <span class="n">look</span> <span class="n">in</span> <span class="n">the</span> <span class="n">row</span> <span class="k">for</span> <span class="n">j</span> <span class="n">and</span> <span class="n">the</span> <span class="n">column</span> <span class="k">for</span> <span class="n">i</span> <span class="n">to</span> <span class="n">find</span> <span class="n">that</span> <span class="n">the</span> <span class="n">answer</span> <span class="n">is</span> <span class="o">-</span><span class="n">k</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">As</span> <span class="n">you</span> <span class="n">can</span> <span class="n">see</span> <span class="n">from</span> <span class="n">the</span> <span class="n">above</span> <span class="n">examples</span><span class="p">,</span> <span class="n">the</span> <span class="n">quaternions</span> <span class="n">are</span> <span class="n">not</span> <span class="n">commutative</span> <span class="o">--</span> <span class="n">that</span> <span class="n">is</span><span class="p">,</span> <span class="n">there</span> <span class="n">are</span> <span class="n">some</span> <span class="n">a</span> <span class="n">and</span> <span class="n">b</span> <span class="k">for</span> <span class="n">which</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span> <span class="o">!=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">a</span><span class="p">.</span> <span class="n">However</span> <span class="n">they</span> <span class="n">are</span> <span class="n">associative</span> <span class="o">--</span> <span class="k">for</span> <span class="n">any</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">and</span> <span class="n">c</span><span class="p">,</span> <span class="n">it</span><span class="err">&#39;</span><span class="n">s</span> <span class="nb">true</span> <span class="n">that</span> <span class="n">a</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span> <span class="n">c</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Negative</span> <span class="n">signs</span> <span class="n">before</span> <span class="n">quaternions</span> <span class="n">work</span> <span class="n">as</span> <span class="n">they</span> <span class="n">normally</span> <span class="k">do</span> <span class="o">--</span> <span class="k">for</span> <span class="n">any</span> <span class="n">quaternions</span> <span class="n">a</span> <span class="n">and</span> <span class="n">b</span><span class="p">,</span> <span class="n">it</span><span class="err">&#39;</span><span class="n">s</span> <span class="nb">true</span> <span class="n">that</span> <span class="o">-</span><span class="n">a</span> <span class="o">*</span> <span class="o">-</span><span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="n">and</span> <span class="o">-</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="o">-</span><span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="n">You</span> <span class="n">want</span> <span class="n">to</span> <span class="n">argue</span> <span class="n">that</span> <span class="n">your</span> <span class="n">misspelling</span> <span class="n">was</span> <span class="n">equivalent</span> <span class="n">to</span> <span class="n">the</span> <span class="n">correct</span> <span class="n">spelling</span> <span class="n">ijk</span> <span class="n">by</span> <span class="n">showing</span> <span class="n">that</span> <span class="n">you</span> <span class="n">can</span> <span class="n">split</span> <span class="n">your</span> <span class="n">string</span> <span class="n">of</span> <span class="n">is</span><span class="p">,</span> <span class="n">js</span><span class="p">,</span> <span class="n">and</span> <span class="n">ks</span> <span class="n">in</span> <span class="n">two</span> <span class="n">places</span><span class="p">,</span> <span class="n">forming</span> <span class="n">three</span> <span class="n">substrings</span><span class="p">,</span> <span class="n">such</span> <span class="n">that</span> <span class="n">the</span> <span class="n">leftmost</span> <span class="n">substring</span> <span class="n">reduces</span> <span class="p">(</span><span class="n">under</span> <span class="n">quaternion</span> <span class="n">multiplication</span><span class="p">)</span> <span class="n">to</span> <span class="n">i</span><span class="p">,</span> <span class="n">the</span> <span class="n">middle</span> <span class="n">substring</span> <span class="n">reduces</span> <span class="n">to</span> <span class="n">j</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">right</span> <span class="n">substring</span> <span class="n">reduces</span> <span class="n">to</span> <span class="n">k</span><span class="p">.</span> <span class="p">(</span><span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">jij</span> <span class="n">would</span> <span class="n">be</span> <span class="n">interpreted</span> <span class="n">as</span> <span class="n">j</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="p">;</span> <span class="n">j</span> <span class="o">*</span> <span class="n">i</span> <span class="n">is</span> <span class="o">-</span><span class="n">k</span><span class="p">,</span> <span class="n">and</span> <span class="o">-</span><span class="n">k</span> <span class="o">*</span> <span class="n">j</span> <span class="n">is</span> <span class="n">i</span><span class="p">,</span> <span class="n">so</span> <span class="n">jij</span> <span class="n">reduces</span> <span class="n">to</span> <span class="n">i</span><span class="p">.)</span> <span class="n">If</span> <span class="n">this</span> <span class="n">is</span> <span class="n">possible</span><span class="p">,</span> <span class="n">you</span> <span class="n">will</span> <span class="n">get</span> <span class="n">your</span> <span class="n">point</span> <span class="n">back</span><span class="p">.</span> <span class="n">Can</span> <span class="n">you</span> <span class="n">find</span> <span class="n">a</span> <span class="n">way</span> <span class="n">to</span> <span class="k">do</span> <span class="n">it</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">Input</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">first</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="n">input</span> <span class="n">gives</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">test</span> <span class="n">cases</span><span class="p">,</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span><span class="p">.</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="n">test</span> <span class="n">cases</span> <span class="n">follow</span><span class="p">.</span> <span class="n">Each</span> <span class="n">consists</span> <span class="n">of</span> <span class="n">one</span> <span class="n">line</span> <span class="n">with</span> <span class="n">two</span> <span class="n">space</span><span class="o">-</span><span class="n">separated</span> <span class="n">integers</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="n">and</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">another</span> <span class="n">line</span> <span class="n">with</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="n">characters</span><span class="p">,</span> <span class="n">all</span> <span class="n">of</span> <span class="n">which</span> <span class="n">are</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">or</span> <span class="n">k</span><span class="p">.</span> <span class="n">Note</span> <span class="n">that</span> <span class="n">the</span> <span class="n">string</span> <span class="n">never</span> <span class="n">contains</span> <span class="n">negative</span> <span class="n">signs</span><span class="p">,</span> <span class="mi">1</span><span class="n">s</span><span class="p">,</span> <span class="n">or</span> <span class="n">any</span> <span class="n">other</span> <span class="n">characters</span><span class="p">.</span> <span class="n">The</span> <span class="n">string</span> <span class="n">that</span> <span class="n">you</span> <span class="n">are</span> <span class="n">to</span> <span class="n">evaluate</span> <span class="n">is</span> <span class="n">the</span> <span class="n">given</span> <span class="n">string</span> <span class="n">of</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="n">characters</span> <span class="n">repeated</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="n">times</span><span class="p">.</span> <span class="n">For</span> <span class="n">instance</span><span class="p">,</span> <span class="k">for</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">given</span> <span class="n">string</span> <span class="n">kiij</span><span class="p">,</span> <span class="n">your</span> <span class="n">input</span> <span class="n">string</span> <span class="n">would</span> <span class="n">be</span> <span class="n">kiijkiijkiij</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">each</span> <span class="n">test</span> <span class="k">case</span><span class="p">,</span> <span class="n">output</span> <span class="n">one</span> <span class="n">line</span> <span class="n">containing</span> <span class="s">&quot;Case #x: y&quot;</span><span class="p">,</span> <span class="n">where</span> <span class="n">x</span> <span class="n">is</span> <span class="n">the</span> <span class="n">test</span> <span class="k">case</span> <span class="n">number</span> <span class="p">(</span><span class="n">starting</span> <span class="n">from</span> <span class="mi">1</span><span class="p">)</span> <span class="n">and</span> <span class="n">y</span> <span class="n">is</span> <span class="n">either</span> <span class="n">YES</span> <span class="n">or</span> <span class="n">NO</span><span class="p">,</span> <span class="n">depending</span> <span class="n">on</span> <span class="n">whether</span> <span class="n">the</span> <span class="n">string</span> <span class="n">can</span> <span class="n">be</span> <span class="n">broken</span> <span class="n">into</span> <span class="n">three</span> <span class="n">parts</span> <span class="n">that</span> <span class="n">reduce</span> <span class="n">to</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">and</span> <span class="n">k</span><span class="p">,</span> <span class="n">in</span> <span class="n">that</span> <span class="n">order</span><span class="p">,</span> <span class="n">as</span> <span class="n">described</span> <span class="n">above</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Limits</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">100.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">10000.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Small</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">10000.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">10000.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Large</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">1012.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">L</span><span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">1016.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Input</span>       <span class="n">Output</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">5</span>           <span class="n">Case</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">NO</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">1</span>         <span class="n">Case</span> <span class="err">#</span><span class="mi">2</span><span class="o">:</span> <span class="n">YES</span>
</span><span class='line'><span class="n">ik</span>          <span class="n">Case</span> <span class="err">#</span><span class="mi">3</span><span class="o">:</span> <span class="n">NO</span>
</span><span class='line'><span class="mi">3</span> <span class="mi">1</span>         <span class="n">Case</span> <span class="err">#</span><span class="mi">4</span><span class="o">:</span> <span class="n">YES</span>
</span><span class='line'><span class="n">ijk</span>         <span class="n">Case</span> <span class="err">#</span><span class="mi">5</span><span class="o">:</span> <span class="n">NO</span>
</span><span class='line'><span class="mi">3</span> <span class="mi">1</span>
</span><span class='line'><span class="n">kji</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">6</span>
</span><span class='line'><span class="n">ji</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">10000</span>
</span><span class='line'><span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>
In Case #1, the string is too short to be split into three substrings.</p>

<p>In Case #2, just split the string into i, j, and k.</p>

<p>In Case #3, the only way to split the string into three parts is k, j, i, and this does not satisfy the conditions.</p>

<p>In Case #4, the string is jijijijijiji. It can be split into jij (which reduces to i), iji (which reduces to j), and jijiji (which reduces to k).</p>

<p>In Case #5, no matter how you choose your substrings, none of them can ever reduce to a j or a k.</p>

<p>Solution
<figure class='code'><figcaption><span>C-small.c</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_i</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_j</span> <span class="mi">3</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_k</span> <span class="mi">4</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">quaternion</span><span class="p">(</span><span class="kt">int</span> <span class="n">para1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">para2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sig</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">para1</span> <span class="o">*</span> <span class="n">para2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sig</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">sig</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">para1</span><span class="p">);</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">para2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_j</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_k</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_k</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_k</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">_k</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">_j</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sig</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">execTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flag</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">L</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">tmpChar</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">10005</span><span class="p">],</span> <span class="n">all</span><span class="p">[</span><span class="mi">10005</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">C</span><span class="o">-</span><span class="n">small</span><span class="o">-</span><span class="n">attempt1</span><span class="p">.</span><span class="n">in</span><span class="p">.</span><span class="n">txt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">r</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//freopen(&amp;ldquo;in.txt&amp;rdquo;, &amp;ldquo;r&amp;rdquo;, stdin);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Result</span><span class="p">.</span><span class="n">txt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">w</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">execTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">execTime</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">execTime</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">L</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="n">X</span> <span class="o">*</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">tmpChar</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">X</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">*</span><span class="n">L</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">tmpChar</span><span class="o">-&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="n">_i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">!=</span> <span class="n">_j</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">quaternion</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">all</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">all</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">_i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">all</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">_j</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">all</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">_k</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">END</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">Flag</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Case</span> <span class="err">#</span><span class="o">%</span><span class="nl">d</span><span class="p">:</span> <span class="n">YES</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Case</span> <span class="err">#</span><span class="o">%</span><span class="nl">d</span><span class="p">:</span> <span class="n">NO</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;---</span>
</span><span class='line'>
</span><span class='line'><span class="cp">####Problem D. Ominous Omino</span>
</span><span class='line'><span class="n">Problem</span>
</span><span class='line'>
</span><span class='line'><span class="n">An</span> <span class="n">N</span><span class="o">-</span><span class="n">omino</span> <span class="n">is</span> <span class="n">a</span> <span class="n">two</span><span class="o">-</span><span class="n">dimensional</span> <span class="n">shape</span> <span class="n">formed</span> <span class="n">by</span> <span class="n">joining</span> <span class="n">N</span> <span class="n">unit</span> <span class="n">cells</span> <span class="n">fully</span> <span class="n">along</span> <span class="n">their</span> <span class="n">edges</span> <span class="n">in</span> <span class="n">some</span> <span class="n">way</span><span class="p">.</span> <span class="n">More</span> <span class="n">formally</span><span class="p">,</span> <span class="n">a</span> <span class="mi">1</span><span class="o">-</span><span class="n">omino</span> <span class="n">is</span> <span class="n">a</span> <span class="mi">1</span><span class="n">x1</span> <span class="n">unit</span> <span class="n">square</span><span class="p">,</span> <span class="n">and</span> <span class="n">an</span> <span class="n">N</span><span class="o">-</span><span class="n">omino</span> <span class="n">is</span> <span class="n">an</span> <span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="n">omino</span> <span class="n">with</span> <span class="n">one</span> <span class="n">or</span> <span class="n">more</span> <span class="n">of</span> <span class="n">its</span> <span class="n">edges</span> <span class="n">joined</span> <span class="n">to</span> <span class="n">an</span> <span class="n">adjacent</span> <span class="mi">1</span><span class="n">x1</span> <span class="n">unit</span> <span class="n">square</span><span class="p">.</span> <span class="n">For</span> <span class="n">the</span> <span class="n">purpose</span> <span class="n">of</span> <span class="n">this</span> <span class="n">problem</span><span class="p">,</span> <span class="n">we</span> <span class="n">consider</span> <span class="n">two</span> <span class="n">N</span><span class="o">-</span><span class="n">ominoes</span> <span class="n">to</span> <span class="n">be</span> <span class="n">the</span> <span class="n">same</span> <span class="k">if</span> <span class="n">one</span> <span class="n">can</span> <span class="n">be</span> <span class="n">transformed</span> <span class="n">into</span> <span class="n">the</span> <span class="n">other</span> <span class="n">via</span> <span class="n">reflection</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="n">rotation</span><span class="p">.</span> <span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">these</span> <span class="n">are</span> <span class="n">the</span> <span class="n">five</span> <span class="n">possible</span> <span class="mi">4</span><span class="o">-</span><span class="nl">ominoes</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="p">[</span><span class="n">Omino1</span><span class="p">](</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="n">omino</span><span class="p">.</span><span class="n">png</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">And</span> <span class="n">here</span> <span class="n">are</span> <span class="n">some</span> <span class="n">of</span> <span class="n">the</span> <span class="mi">108</span> <span class="n">possible</span> <span class="mi">7</span><span class="o">-</span><span class="nl">ominoes</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="p">[</span><span class="n">Omino2</span><span class="p">](</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="n">omino</span><span class="p">.</span><span class="n">png</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Richard</span> <span class="n">and</span> <span class="n">Gabriel</span> <span class="n">are</span> <span class="n">going</span> <span class="n">to</span> <span class="n">play</span> <span class="n">a</span> <span class="n">game</span> <span class="n">with</span> <span class="n">the</span> <span class="n">following</span> <span class="n">rules</span><span class="p">,</span> <span class="k">for</span> <span class="n">some</span> <span class="n">predetermined</span> <span class="n">values</span> <span class="n">of</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="o">*</span><span class="p">,</span> <span class="n">and</span> <span class="o">*</span><span class="n">C</span><span class="o">*:</span>
</span><span class='line'>
</span><span class='line'><span class="mf">1.</span> <span class="n">Richard</span> <span class="n">will</span> <span class="n">choose</span> <span class="n">any</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">possible</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">ominoes</span><span class="p">.</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">Gabriel</span> <span class="n">must</span> <span class="n">use</span> <span class="n">at</span> <span class="n">least</span> <span class="n">one</span> <span class="n">copy</span> <span class="n">of</span> <span class="n">that</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">omino</span><span class="p">,</span> <span class="n">along</span> <span class="n">with</span> <span class="n">arbitrarily</span> <span class="n">many</span> <span class="n">copies</span> <span class="n">of</span> <span class="n">any</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">ominoes</span> <span class="p">(</span><span class="n">which</span> <span class="n">can</span> <span class="n">include</span> <span class="n">the</span> <span class="n">one</span> <span class="n">Richard</span> <span class="n">chose</span><span class="p">),</span> <span class="n">to</span> <span class="n">completely</span> <span class="n">fill</span> <span class="n">in</span> <span class="n">an</span> <span class="o">*</span><span class="n">R</span><span class="o">*-</span><span class="n">by</span><span class="o">-*</span><span class="n">C</span><span class="o">*</span> <span class="n">grid</span><span class="p">,</span> <span class="n">with</span> <span class="n">no</span> <span class="n">overlaps</span> <span class="n">and</span> <span class="n">no</span> <span class="n">spillover</span><span class="p">.</span> <span class="n">That</span> <span class="n">is</span><span class="p">,</span> <span class="n">every</span> <span class="n">cell</span> <span class="n">must</span> <span class="n">be</span> <span class="n">covered</span> <span class="n">by</span> <span class="n">exactly</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span> <span class="n">cells</span> <span class="n">making</span> <span class="n">up</span> <span class="n">an</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">omino</span><span class="p">,</span> <span class="n">and</span> <span class="n">no</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">omino</span> <span class="n">can</span> <span class="n">extend</span> <span class="n">outside</span> <span class="n">the</span> <span class="n">grid</span><span class="p">.</span> <span class="n">Gabriel</span> <span class="n">is</span> <span class="n">allowed</span> <span class="n">to</span> <span class="n">rotate</span> <span class="n">or</span> <span class="n">reflect</span> <span class="n">as</span> <span class="n">many</span> <span class="n">of</span> <span class="n">the</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">ominoes</span> <span class="n">as</span> <span class="n">he</span> <span class="n">wants</span><span class="p">,</span> <span class="n">including</span> <span class="n">the</span> <span class="n">one</span> <span class="n">Richard</span> <span class="n">chose</span><span class="p">.</span> <span class="n">If</span> <span class="n">Gabriel</span> <span class="n">can</span> <span class="n">completely</span> <span class="n">fill</span> <span class="n">in</span> <span class="n">the</span> <span class="n">grid</span><span class="p">,</span> <span class="n">he</span> <span class="n">wins</span><span class="p">;</span> <span class="n">otherwise</span><span class="p">,</span> <span class="n">Richard</span> <span class="n">wins</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Given</span> <span class="n">particular</span> <span class="n">values</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="o">*</span><span class="p">,</span> <span class="n">and</span> <span class="o">*</span><span class="n">C</span><span class="o">*</span><span class="p">,</span> <span class="n">can</span> <span class="n">Richard</span> <span class="n">choose</span> <span class="n">an</span> <span class="o">*</span><span class="n">X</span><span class="o">*-</span><span class="n">omino</span> <span class="n">that</span> <span class="n">will</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">he</span> <span class="n">wins</span><span class="p">,</span> <span class="n">or</span> <span class="n">is</span> <span class="n">Gabriel</span> <span class="n">guaranteed</span> <span class="n">to</span> <span class="n">win</span> <span class="n">no</span> <span class="n">matter</span> <span class="n">what</span> <span class="n">Richard</span> <span class="n">chooses</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">Input</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">first</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="n">input</span> <span class="n">gives</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">test</span> <span class="n">cases</span><span class="p">,</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span><span class="p">.</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="n">lines</span> <span class="n">follow</span><span class="p">.</span> <span class="n">Each</span> <span class="n">contains</span> <span class="n">three</span> <span class="n">space</span><span class="o">-</span><span class="n">separated</span> <span class="nl">integers</span><span class="p">:</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="o">*</span><span class="p">,</span> <span class="n">and</span> <span class="o">*</span><span class="n">C</span><span class="o">*</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">each</span> <span class="n">test</span> <span class="k">case</span><span class="p">,</span> <span class="n">output</span> <span class="n">one</span> <span class="n">line</span> <span class="n">containing</span> <span class="s">&quot;Case #x: y&quot;</span><span class="p">,</span> <span class="n">where</span> <span class="n">x</span> <span class="n">is</span> <span class="n">the</span> <span class="n">test</span> <span class="k">case</span> <span class="n">number</span> <span class="p">(</span><span class="n">starting</span> <span class="n">from</span> <span class="mi">1</span><span class="p">)</span> <span class="n">and</span> <span class="n">y</span> <span class="n">is</span> <span class="n">either</span> <span class="n">RICHARD</span> <span class="p">(</span><span class="k">if</span> <span class="n">there</span> <span class="n">is</span> <span class="n">at</span> <span class="n">least</span> <span class="n">one</span> <span class="n">choice</span> <span class="n">that</span> <span class="n">ensures</span> <span class="n">victory</span> <span class="k">for</span> <span class="n">Richard</span><span class="p">)</span> <span class="n">or</span> <span class="n">GABRIEL</span> <span class="p">(</span><span class="k">if</span> <span class="n">Gabriel</span> <span class="n">will</span> <span class="n">win</span> <span class="n">no</span> <span class="n">matter</span> <span class="n">what</span> <span class="n">Richard</span> <span class="n">chooses</span><span class="p">).</span>
</span><span class='line'><span class="n">Limits</span>
</span><span class='line'>
</span><span class='line'><span class="n">Small</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="o">=</span> <span class="mf">64.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">C</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">4.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Large</span> <span class="n">dataset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">T</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">100.</span>
</span><span class='line'><span class="mi">1</span> <span class="err">≤</span> <span class="o">*</span><span class="n">X</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="o">*</span><span class="p">,</span> <span class="o">**</span><span class="n">C</span><span class="o">*</span> <span class="err">≤</span> <span class="mf">20.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Input</span>       <span class="n">Output</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">4</span>           <span class="n">Case</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">GABRIEL</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span>       <span class="n">Case</span> <span class="err">#</span><span class="mi">2</span><span class="o">:</span> <span class="n">RICHARD</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span>       <span class="n">Case</span> <span class="err">#</span><span class="mi">3</span><span class="o">:</span> <span class="n">RICHARD</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">4</span> <span class="mi">1</span>       <span class="n">Case</span> <span class="err">#</span><span class="mi">4</span><span class="o">:</span> <span class="n">GABRIEL</span>
</span><span class='line'><span class="mi">3</span> <span class="mi">2</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In case #1, Richard only has one 2-omino available to choose &ndash; the 1x2 block formed by joining two unit cells together. No matter how Gabriel places this block in the 2x2 grid, he will leave a hole that can be exactly filled with another 1x2 block. So Gabriel wins.</p>

<p>In case #2, Richard has to choose the 1x2 block, but no matter where Gabriel puts it, he will be left with a single 1x1 hole that he cannot fill using only 2-ominoes. So Richard wins.</p>

<p>In case #3, one winning strategy for Richard is to choose the 2x2 square 4-omino. There is no way for Gabriel to fit that square into the 4x1 grid such that it is completely contained within the grid, so Richard wins.</p>

<p>In case #4, Richard can either pick the straight 3-omino or the L-shaped 3-omino. In either case, Gabriel can fit it into the grid and then use another copy of the same 3-omino to fill in the remaining hole.</p>

<p>Solution
<figure class='code'><figcaption><span>D-small.c</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">execTime</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flag</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">C</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;D-small-attempt0.in.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="n">freopen</span><span class="p">(</span><span class="s">&quot;Result.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">execTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">execTime</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span> <span class="n">execTime</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">X</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">R</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">R</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span><span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">X</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">R</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">C</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">R</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">C</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">Flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Flag</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: RICHARD</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nf">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: GABRIEL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">execTime</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSAPP] Data Lab]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/23/csapp-data-lab/"/>
    <updated>2015-03-23T16:34:31+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/23/csapp-data-lab</id>
    <content type="html"><![CDATA[<p>Data Lab: Manipulating Bits</p>

<!--more-->


<pre><code class="C bit.c">/* 
 * bitOr - x|y using only ~ and &amp; 
 *   Example: bitOr(6, 5) = 7
 *   Legal ops: ~ &amp;
 *   Max ops: 8
 *   Rating: 1
 */
int bitOr(int x, int y) {
    return ~((~x)&amp;(~y));
}
/* 
 * anyOddBit - return 1 if any odd-numbered bit in word set to 1
 *   Examples anyOddBit(0x5) = 0, anyOddBit(0x7) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 2
 */
int anyOddBit(int x) {
    return (x&amp;1) | ((x&amp;4)&gt;&gt;2) | ((x&amp;16)&gt;&gt;4) | ((x&amp;64)&gt;&gt;6) | ((x&amp;256)&gt;&gt;8) | ((x&amp;1024)&gt;&gt;10) | ((x&amp;1073741824)&gt;&gt;30);
}
/* 
 * copyLSB - set all bits of result to least significant bit of x
 *   Example: copyLSB(5) = 0xFFFFFFFF, copyLSB(6) = 0x00000000
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 5
 *   Rating: 2
 */
int copyLSB(int x) {
  return ((x &lt;&lt; 31) &gt;&gt; 31);
}
/* 
 * bitMask - Generate a mask consisting of all 1's 
 *   lowbit and highbit
 *   Examples: bitMask(5,3) = 0x38
 *   Assume 0 &lt;= lowbit &lt;= 31, and 0 &lt;= highbit &lt;= 31
 *   If lowbit &gt; highbit, then mask should be all 0's
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 16
 *   Rating: 3
 */
int bitMask(int highbit, int lowbit) {
    int mask1 = ~0 &lt;&lt; highbit;
    int mask2 = ~(~0 &lt;&lt; lowbit);
    int mask3 = ~(1 &lt;&lt; highbit);
    mask1 = mask1 &amp; mask3;

    return ~(mask1 | mask2);
}
/* 
 * reverseBytes - reverse the bytes of x
 *   Example: reverseBytes(0x01020304) = 0x04030201
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 25
 *   Rating: 3
 */
int reverseBytes(int x) {


    int newbyte0 = (x &gt;&gt; 24) &amp; 0xff;
    int newbyte1 = (x &gt;&gt; 8) &amp; 0xff00;
    int newbyte2 = (x &lt;&lt; 8) &amp; (0xff&lt;&lt;8);
    int newbyte3 = x &lt;&lt; 24;

    return newbyte0 | newbyte1 | newbyte2 | newbyte3;
}
/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 16
 *   Rating: 3
 */
int conditional(int x, int y, int z) {
    int num;
    num = -1;
    (((!x)+num)&amp;y) + ((~((!x)+num))&amp;z); 
}
/* 
 * bang - Compute !x without using !
 *   Examples: bang(3) = 0, bang(0) = 1
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 4 
 */
int bang(int x) {    
    x = ( x &gt;&gt; 16 ) | x;
    x = ( x &gt;&gt; 8 ) | x;
    x = ( x &gt;&gt; 4 ) | x;
    x = ( x &gt;&gt; 2 ) | x;
    x = ( x &gt;&gt; 1) | x;

    return ~x &amp; 1;
}
/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ &amp; ^ | +
 *   Max ops: 10
 *   Rating: 1
 */
int isTmax(int x) {
    int m;
    m = (1 &lt;&lt; 31) + 1;

    return !(x ^ m);
}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 &lt;= n &lt;= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) {
    int mask = x &gt;&gt; 31;

    return !(((~x &amp; mask) + (x &amp; ~mask)) &gt;&gt; (n + ~0));
}
/* 
 * isNotEqual - return 0 if x == y, and 1 otherwise 
 *   Examples: isNotEqual(5,5) = 0, isNotEqual(4,5) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 6
 *   Rating: 2
 */
int isNotEqual(int x, int y) {
  return (!!(x ^ y));
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 &lt;= n &lt;= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {
    int one = 0x1 &lt;&lt; 31, two, three;
    x = x &gt;&gt; n;
    two = one &gt;&gt; n;
    three = ~(two &lt;&lt; 1);

    return x &amp; three;
}
/* 
 * rotateLeft - Rotate x to the left by n
 *   Can assume that 0 &lt;= n &lt;= 31
 *   Examples: rotateLeft(0x87654321,4) = 0x76543218
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 25
 *   Rating: 3 
 */
int rotateLeft(int x, int n) {
    return (x &lt;&lt; n) | (x &gt;&gt; (32 - n)) &amp; ~(-1 &lt;&lt; n);
}
/* 
 * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 3
 */
int isAsciiDigit(int x) {
  return (!(x&lt;&lt;6))&amp;((x &lt;&lt; 5)) &amp; (x &lt;&lt; 4) &amp; (~(x &lt;&lt; 3) | (~(x &lt;&lt; 2) &amp; ~(x &lt;&lt; 1)));
}
/* 
 * absVal - absolute value of x
 *   Example: absVal(-1) = 1.
 *   You may assume -TMax &lt;= x &lt;= TMax
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 10
 *   Rating: 4
 */
int absVal(int x) {
    int z; 
    z = x&gt;&gt;31;
    z = z&amp;1;
    z = ~z;
    z = z+1;
    z = x^z;
    int y; 
    y= x&gt;&gt;31;
    y = y&amp;1;
    z = z+y;

    return z;
}
/* 
 * isNonZero - Check whether x is nonzero using
 *              the legal operators except !
 *   Examples: isNonZero(3) = 1, isNonZero(0) = 0
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 10
 *   Rating: 4 
 */
int isNonZero(int x) {
    int n = ~x + 1;

    return ((n &gt;&gt; 31) | (x &gt;&gt; 31)) &amp; 1;
}
/* 
 * bitAnd - x&amp;y using only ~ and | 
 *   Example: bitAnd(6, 5) = 4
 *   Legal ops: ~ |
 *   Max ops: 8
 *   Rating: 1
 */
int bitAnd(int x, int y) {
  return ~(~x | ~y);  //Using De Morgan's law
}
/* 
 * getByte - Extract byte n from word x
 *   Bytes numbered from 0 (LSB) to 3 (MSB)
 *   Examples: getByte(0x12345678,1) = 0x56
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 6
 *   Rating: 2
 */
int getByte(int x, int n) {
  /*
   *First we rightshift x (fine if you like to leftshift :D)
   *Then use &amp;0 to clear the part we don't need
  */
  return (x &gt;&gt; (n &lt;&lt; 3)) &amp; (0xFF);
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 &lt;= n &lt;= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {
  /*
   *All we need to do is to clear the sign bit after shifting
   *So we build a mask to make sure that the sign bit of (x&gt;&gt;n) is always 0
  */
  int mask = ~(((1 &lt;&lt; 31) &gt;&gt; n) &lt;&lt; 1); //set 1 for the hightest digit
  return mask &amp; (x &gt;&gt; n);
}
/*
 * bitCount - returns count of number of 1's in word
 *   Examples: bitCount(5) = 2, bitCount(7) = 3
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 40
 *   Rating: 4
 */
int bitCount(int x) {
  int mask1 = (0x55) | (0x55 &lt;&lt; 8) | (0x55 &lt;&lt; 16) | (0x55 &lt;&lt; 24); //  mask1=0x55555555
  int mask2 = (0x33) | (0x33 &lt;&lt; 8) | (0x33 &lt;&lt; 16) | (0x33 &lt;&lt; 24); //  mask2=0x33333333
  int mask3 = (0x0f) | (0x0f &lt;&lt; 8) | (0x0f &lt;&lt; 16) | (0x0f &lt;&lt; 24); //  mask3=0x0f0f0f0f
  int mask4 = (0xff) | (0xff &lt;&lt; 16);  //  mask4=0x00ff00ff
  int mask5 = (0xff) | (0xff &lt;&lt; 8);  // mask5=0x0000ffff
  int result; 
  /*
   *result = (mask1 &amp; x) + (mask1 &amp; (x &gt;&gt; 1));  //  add every 2 bits
   *result = (mask2 &amp; result) + (mask2 &amp; (result &gt;&gt; 2));  //  add every 4 bits
   *result = (mask3 &amp; result) + (mask3 &amp; (result &gt;&gt; 4));  //  add every 8 bits
   *result = (mask4 &amp; result) + (mask4 &amp; (result &gt;&gt; 8));  //  add every 16 bits
   *result = (mask5 &amp; result) + (mask5 &amp; (result &gt;&gt; 16)); //  add every 32 bits
  */
  result = (x &amp; mask1) + ((x &gt;&gt; 1) &amp; mask1);
  result = (result &amp; mask2) + ((result &gt;&gt; 2) &amp; mask2); 
  result = (result + (result &gt;&gt; 4)) &amp; mask3;
  result = (result + (result &gt;&gt; 8)) &amp; mask4;
  result = (result + (result &gt;&gt; 16)) &amp; mask5;
  return result;
}
/* 
 * bang - Compute !x without using !
 *   Examples: bang(3) = 0, bang(0) = 1
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 4 
 */
int bang(int x) {
  return (~((x | (~x + 1)) &gt;&gt; 31) &amp; 1);
}
/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 4
 *   Rating: 1
 */
int tmin(void) {
  return 1 &lt;&lt; 31;
}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 &lt;= n &lt;= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) {
  /* if x can be represented as an n-bit, two's complement integer,
   * then high 32-n+1 bits are all 0s or 1s.
   */
  x = x &gt;&gt; (n + ~0);  /* x &gt;&gt; n-1, ~0 to get -1 */
  x = x + (x &amp; 1);
  return !x;
}
/* 
 * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30
 *  Round toward zero
 *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 2
 */
int divpwr2(int x, int n) {
    int sign = (x &gt;&gt; 31) &amp; 1; /* get sign */
    int mask = (1 &lt;&lt; n) + ~0;
    int lowbits = x &amp; mask;
    return (x &gt;&gt; n) + (((!lowbits) ^ 1) &amp; sign);
}
/* 
 * negate - return -x 
 *   Example: negate(1) = -1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 5
 *   Rating: 2
 */
int negate(int x) {
  return ~x + 1;
}
/* 
 * isPositive - return 1 if x &gt; 0, return 0 otherwise 
 *   Example: isPositive(-1) = 0.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 8
 *   Rating: 3
 */
int isPositive(int x) {
  return !((x &gt;&gt; 31) | !x);
}
/* 
 * isLessOrEqual - if x &lt;= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {
  int z = (~x + 1) + y; /*  z = y - x  */
  int signx = (x &gt;&gt; 31) &amp; 1;
  int signy = (y &gt;&gt; 31) &amp; 1;
  int signz = (z &gt;&gt; 31) &amp; 1;
  /*  (x &lt; 0 and y &gt;= 0)  and  (x * y &gt;= 0 and x &lt;= y)  */
  return ((signx ^ signy) &amp; signx) + ((signx ^ signy ^ 1) &amp; !signz);
}
/*
 * ilog2 - return floor(log base 2 of x), where x &gt; 0
 *   Example: ilog2(16) = 4
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 90
 *   Rating: 4
 */
int ilog2(int x) {
  /*  while (x) x /= 2;
   *  use dichotomy to calculate the sum of 0s
   *  if there're x 0s on the left then shiftleft x bits
   */
  int x1, x2, x3, x4, x5, n;
  x1 = x &gt;&gt; 16;
  n = (16 &amp; ((!x1) &lt;&lt; 4));
  x = x &lt;&lt; (16 &amp; ((!x1) &lt;&lt; 4));
  x2 = x &gt;&gt; 24;
  n = n + (8 &amp; ((!x2) &lt;&lt; 3));
  x = x &lt;&lt; (8 &amp; ((!x2) &lt;&lt; 3));
  x3 = x &gt;&gt; 28;
  n = n + (4 &amp; ((!x3) &lt;&lt; 2));
  x = x &lt;&lt; (4 &amp; ((!x3) &lt;&lt; 2));
  x4 = x &gt;&gt; 30;
  n = n + (2 &amp; ((!x4) &lt;&lt; 1));
  x = x &lt;&lt; (2 &amp; ((!x4) &lt;&lt; 1));
  x5 = x &gt;&gt; 31;
  n = n + (1 &amp; (!x5));
  return 31 + ~n + 1;  /* 32 - (n + 1) */
}
/* 
 * float_neg - Return bit-level equivalent of expression -f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representations of
 *   single-precision floating point values.
 *   When argument is NaN, return argument.
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 10
 *   Rating: 2
 */
unsigned float_neg(unsigned uf) {
  unsigned result;  
  unsigned tmp;  
  tmp = uf &amp; 0x7fffffff;  /* remove sign bit */
  result = uf ^ 0x80000000; /* change sign bit */
  if ( tmp &gt; 0x7f800000)  /* NaN */
        result = uf;  
 return result;  
}
/* 
 * float_i2f - Return bit-level equivalent of expression (float) x
 *   Result is returned as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point values.
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_i2f(int x) {
  unsigned shiftLeft = 0, afterShift, tmp, flag, abs_x = x, sign = 0;  
  if (x == 0) 
    return 0; /* special case */
  /* get sign and abs for negative x */
  if (x &lt; 0)  
  {  
    sign = 0x80000000;  
    abs_x = -x;  
  }  
  afterShift = abs_x;  
  while (1)  
  {  
    tmp = afterShift;
    afterShift &lt;&lt;= 1;
    shiftLeft++;  /* count shiftleft */
    if (tmp &amp; 0x80000000)
      break;  
  }
  if ((afterShift &amp; 0x01ff) &gt; 0x0100)
    flag = 1;  
  else 
    if ((afterShift &amp; 0x03ff) == 0x0300)  
      flag = 1;  
    else
      flag = 0;
  /* construct the float expression */
  return sign + (afterShift &gt;&gt; 9) + ((159 - shiftLeft) &lt;&lt; 23) + flag;
}
/* 
 * float_twice - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_twice(unsigned uf) {
  unsigned f = uf;  
  /* Compute 2*f. If f is NaN, then return f */  
  if ((f &amp; 0x7F800000) == 0)
    f = ((f &amp; 0x007FFFFF) &lt;&lt; 1) | (0x80000000 &amp; f);
  else
    if ((f &amp; 0x7F800000) != 0x7F800000) /* exp can be extended */
      f =f+0x00800000;  /* exp + 1 */
  return f;  
}
/*
 * bitNor - ~(x|y) using only ~ and &amp;
 *   Example: bitNor(0x6, 0x5) = 0xFFFFFFF8
 *   Legal ops: ~ &amp;
 *   Max ops: 8
 *   Rating: 1
 */
int bitNor(int x, int y) {

  return (~x)&amp;(~y);
}
/*
 * bitXor - x^y using only ~ and &amp;
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &amp;
 *   Max ops: 14
 *   Rating: 2
 */
int bitXor(int x, int y) {
  int a=(~x)&amp;y;
  int b=x&amp;(~y);
  return ~(~a&amp;~b);
}
/*
 * leastBitPos - return a mask that marks the position of the
 *               least significant 1 bit. If x == 0, return 0
 *   Example: leastBitPos(96) = 0x20
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 6
 *   Rating: 4
 */
int leastBitPos(int x) {
    return x&amp;(~x+1);
}
/*
 * isNonNegative - return 1 if x &gt;= 0, return 0 otherwise
 *   Example: isNonNegative(-1) = 0.  isNonNegative(0) = 1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 6
 *   Rating: 3
 */
int isNonNegative(int x) {
    return !((x&gt;&gt;31)&amp;0x01);
}
/*
 * isGreater - if x &gt; y  then return 1, else return 0
 *   Example: isGreater(4,5) = 0, isGreater(5,4) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 24
 *   Rating: 3
 */
int isGreater(int x, int y) {
    int signofx=x&gt;&gt;31;
    int signofy=y&gt;&gt;31;
    int signequal=(!(signofx ^ signofy)) &amp; ((~y + x) &gt;&gt; 31);
    int signnequal=signofx &amp; !signofy;
    return !(signequal | signnequal);
}
/*
 * addOK - Determine if can compute x+y without overflow
 *   Example: addOK(0x80000000,0x80000000) = 0,
 *            addOK(0x80000000,0x70000000) = 1,
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 20
 *   Rating: 3
 */
int addOK(int x, int y) {
    int xysum = x + y;
    int signx = x &gt;&gt; 31;
    int signy = y &gt;&gt; 31;
    int signsumxy = xysum &gt;&gt; 31;  
    return !(~(signx ^ signy) &amp; (signx ^ signsumxy));
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Climbing Stairs]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs/"/>
    <updated>2015-03-20T20:01:00+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs</id>
    <content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p>

<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>

<!--more-->


<pre><code class="C Climbing Stairs">int climbStairs(int n) {
    int stepOne = 1;
    int stepTwo = 0;
    int ret = 0;
    int i;

    for (i = 0; i &lt; n; i++) {
        ret = stepOne + stepTwo;
        stepTwo = stepOne;
        stepOne = ret;
    }

    return ret;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Majority Element]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element/"/>
    <updated>2015-03-20T19:57:22+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element</id>
    <content type="html"><![CDATA[<p>Given an array of size n, find the majority element. The majority element is the element that appears more than <em>⌊ n/2 ⌋</em> times.</p>

<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>

<!--more-->


<pre><code class="C Majority Element">intcomp(const void * a,const void * b)
{
    return * (int *)a - * (int *)b;
}
int majorityElement(int num[], int n) {
    qsort(num, n, sizeof(int), intcomp);
    return num[n/2];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Compare Version Numbers]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers/"/>
    <updated>2015-03-20T19:27:39+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers</id>
    <content type="html"><![CDATA[<p>Compare two version numbers version1 and version2.  <br/>
If version1 > version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.</p>

<p>You may assume that the version strings are non-empty and contain only digits and the . character.   <br/>
The <code>.</code> character does not represent a decimal point and is used to separate number sequences.  <br/>
For instance, <code>2.5</code> is not &ldquo;two and a half&rdquo; or &ldquo;half way to version three&rdquo;, it is the fifth second-level revision of the second first-level revision.</p>

<p>Here is an example of version numbers ordering: <br/>
<code>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</code></p>

<!--more-->


<pre><code class="C compareVersion">int compareVersion(char * version1, char * version2){
    int v1 = 0, v2 = 0;
    int p1 = 0, p2 = 0;

    while (p1 &lt; strlen(version1) || p2 &lt; strlen(version2)) {
        v1 = 0;
        while (p1 &lt; strlen(version1)) {
            if (version1[p1] == '.') {
                ++p1;
                break;
            }
            v1 = 10 * v1 + (int)(version1[p1] - '0');
            ++p1;
        }

        v2 = 0;
        while (p2 &lt; strlen(version2)) {
            if (version2[p2] == '.') {
                ++p2;
                break;
            }
            v2 = 10 * v2 + (int)(version2[p2] - '0');
            ++p2;
        }

        if (v1 &lt; v2) {
            return -1;
        }
        else if (v1 &gt; v2) {
            return 1;
        }
    }

    return 0;
}  
</code></pre>
]]></content>
  </entry>
  
</feed>
