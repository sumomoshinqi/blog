<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vhdl | sumomoshinqi]]></title>
  <link href="http://sumomoshinqi.github.io/blog/categories/vhdl/atom.xml" rel="self"/>
  <link href="http://sumomoshinqi.github.io/"/>
  <updated>2015-08-09T16:33:33+08:00</updated>
  <id>http://sumomoshinqi.github.io/</id>
  <author>
    <name><![CDATA[sumomoshinqi]]></name>
    <email><![CDATA[edam.lqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[8 bit CPU design]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/05/05/8-bit-cpu-design/"/>
    <updated>2015-05-05T14:02:05+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/05/05/8-bit-cpu-design</id>
    <content type="html"><![CDATA[<p>Finally it works! üòÇ</p>

<!--more-->


<p>Design pattern<br/>
<img src="/images/posts/8bitcpu_design.png" alt="design pattern" /></p>

<p>Source code of my CPU VHDL implementation on a Xilinx XC2S150 FPGA.</p>

<pre><code class="VHDL 8bit_cpu.vhd">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- ===================================================================================
-- ===================================================================================
entity cpu_8 is
    Port (
        DB:     inout std_logic_vector(7 downto 0);     --Êï∞ÊçÆÊÄªÁ∫ø
        AB:     buffer std_logic_vector(15 downto 0);   --Âú∞ÂùÄÊÄªÁ∫ø
        CI:     buffer std_logic_vector(31 downto 0);   --ÂÖ∂‰∏≠‰Ωé10‰ΩçÊòØMPCÁöÑËæìÂá∫
        CO:     in std_logic_vector(31 downto 0);       --ÂæÆÊåá‰ª§ËæìÂÖ•Âà∞MIR

        --ÊéßÂà∂ÊÄªÁ∫ø
        CLK, RESET, RUN:              in std_logic; 
        MWR, MRD, IOR, IOW, MCLK:     buffer std_logic;
        --Â§ñÈÉ®ËßÇÂØü
        CTRL1, CTRL2, CTRL3, CTRL4:   buffer std_logic;
        MUX:                          in std_logic_vector(2 downto 0);
        PRIX, KRIX:                   in std_logic
    );
end cpu_8;
-- ===================================================================================
-- ===================================================================================
architecture cpu_8_behave of cpu_8 is
--ÂÜÖÈÉ®‰ø°Âè∑ÂÆö‰πâÈÉ®ÂàÜ

--signal in M Â≠òÂÇ®Âô®
    --ËØªÂÜôÊéßÂà∂ËÑâÂÜ≤
    signal CWR, CRD:        std_logic;
    --ËØªÂÜôÊéßÂà∂‰ø°Âè∑
    signal CWRX, CRDX:      std_logic;

--signal in A Á¥ØÂä†Âô®
    signal GA, ASR, CA:     std_logic;
    signal A:               std_logic_vector(7 downto 0);

--signal in ACTÁ¥ØÂä†Âô®ÊöÇÂ≠òÂô®
    signal ACT:             std_logic_vector(7 downto 0);
    signal GC, CC:          std_logic;

--signal in TMP ‰∏¥Êó∂ÂØÑÂ≠òÂô®
    signal TMP:             std_logic_vector(7 downto 0);
    signal GT, CT:          std_logic;

--signal in Ri ÂØÑÂ≠òÂô®
    signal R7, R6, R5, R4, R3, R2, R1, R0, ROUT:    std_logic_vector(7 downto 0);
    signal WRE, WRC:        std_logic;
    signal RS:              std_logic_vector(2 downto 0);

---Â§öË∑ØÈÄâÊã©Âô® MUXA, MUXB, MUXC, MUXD
--signal in MUXA
    signal MXA:             std_logic;

--signal in MUXB
    signal OB:              std_logic;
    signal MXB:             std_logic_vector(1 downto 0);

--signal in MUXC
    signal MXC:             std_logic_vector(1 downto 0);

--signal in MUXD
    signal PLD:             std_logic_vector(2 downto 0);
    signal PCADD:           std_logic;

--signal in MUXE
    signal MXE:             std_logic;
    signal CYA:             std_logic;
    signal CYD:             std_logic;

--signal in ALU
    signal FA, FB, FF:      std_logic_vector(8 downto 0);
    signal S:               std_logic_vector(2 downto 0);

--signal in CY
    signal CY, CP, CCK:     std_logic;

--signal in Z
    signal ZY:              std_logic;
    signal ZP:              std_logic;
    signal ZCK:             std_logic;

--signal in PC 
    signal PC:              std_logic_vector(15 downto 0);
    signal PCK:             std_logic;
    signal PINC, PRST:      std_logic;
    signal ADR:             std_logic_vector(15 downto 0);      --ÂÖ®Âú∞ÂùÄ

--signal in IR
    signal IR:              std_logic_vector(7 downto 0);

    signal CCI, GI:         std_logic;

--signal in ADRH
    signal ADRH:            std_logic_vector(7 downto 0);
    signal GA1, CA1, AHS:   std_logic;

--signal in ADRL
    signal ADRL:            std_logic_vector(7 downto 0);
    signal GA2, CA2:        std_logic;

--signal in MPC
    signal MPC, MD:         std_logic_vector(9 downto 0);
    signal MCLR, MPLD:      std_logic;
    signal MPCK:            std_logic;

--signal in SP
    signal SP:              std_logic_vector(15 downto 0);
    signal SSP:             std_logic_vector(1 downto 0);
    signal SCK:             std_logic;          

--signal in MIR
    signal MIR:             std_logic_vector(31 downto 0);
    signal MICK:            std_logic;

-- signal for Print and Key
    signal KOUT,POUT:       std_logic;

-- ==================================================================================
-- ==================================================================================

begin

--Êó∂Èíü‰ø°Âè∑‰∏éÂ§ç‰Ωç‰ø°Âè∑

---Êó∂Èíü‰ø°Âè∑
    pMCLK:
    process(MCLK, CLK, RESET, RUN)
    begin
    if((RUN = '0') or (RESET = '0')) then MCLK &lt;= '0';
            elsif(CLK'event and CLK = '0') then MCLK &lt;= not MCLK;
    end if;
    end process pMCLK;

    MPCK    &lt;= not MCLK and CLK;
    MICK    &lt;= not MPCK;

    WRC     &lt;= MCLK;        --ÂØÑÂ≠òÂô® Ri Êó∂Èíü
    PCK     &lt;= MCLK;        --PC Êó∂Èíü
    CA      &lt;= MCLK;        --A Êó∂Èíü
    CT      &lt;= MCLK;        --TMP Êó∂Èíü
    CC      &lt;= MCLK;        --ACT Êó∂Èíü
    CCI     &lt;= MCLK;        --IR Êó∂Èíü
    CA1     &lt;= MCLK;        --ADRH Êó∂Èíü
    CA2     &lt;= MCLK;        --ADRL Êó∂Èíü
    CCK     &lt;= MCLK;        --CY Êó∂Èíü
    SCK     &lt;= MCLK;        --SP Êó∂Èíü
    ZCK     &lt;= MCLK;        --ZY Êó∂Èíü


----Â§ç‰Ωç‰ø°Âè∑
    PRST   &lt;= RESET; 

    pMCLR:
    process(MCLK, RESET)
    begin
        if(RESET = '0') then MCLR &lt;= '0';
            elsif(MCLK'event and MCLK = '1') then MCLR &lt;= RUN;
        end if;
    end process pMCLR;

    CWR     &lt;= CWRX or not MCLK;
    CRD     &lt;= CRDX or not MCLK;

    MRD     &lt;= CRD or AB(15);
    MWR     &lt;= CWR or AB(15) or not CLK;
    IOW     &lt;= not AB(15) or not AB(1) or CWR or not CLK;
    IOR     &lt;= not AB(15) or not AB(0) or CRD;

    --ÂäüËÉΩÈÉ®‰ª∂

----MPCÁöÑÂÆö‰πâ
    pMPC:
    process(MPLD, MPCK, MCLR)
    begin
        if(MCLR = '0') then 
            MPC &lt;= "0000000000";
        elsif(MPCK'event and MPCK = '1') then
            if(MPLD = '0') then 
                MPC &lt;= MD;
            else MPC &lt;= MPC + 1;
            end if;
        end if;
    end process pMPC;

    CI(9 downto 0) &lt;= MPC;

----‰∏∫Á®ãÂ∫èËÆ°Êï∞Âô®ÂÖ•Âè£MDÁöÑÂÆö‰πâ
    MD(0)           &lt;= '1';
    MD(1)           &lt;= '1';
    MD(2)           &lt;= '1';
    MD(7 downto 3)  &lt;= IR(7 downto 3);
    MD(9 downto 8)  &lt;= "00";

----MIRÁöÑÂÆö‰πâ
    pMIR:
    process(MICK)
    begin
        if(MICK'event and MICK = '1') then 
            MIR &lt;= CO;
        end if;
    end process pMIR;

----ÂæÆÁ®ãÂ∫èÊéßÂà∂‰ø°Âè∑
    CWRX    &lt;= MIR(29);
    CRDX    &lt;= MIR(28);
    MPLD    &lt;= MIR(27);
    MXC(1)  &lt;= MIR(26);
    MXC(0)  &lt;= MIR(25);
    SSP(1)  &lt;= MIR(24); 
    SSP(0)  &lt;= MIR(23);
    PINC    &lt;= MIR(22);
    PLD(2)  &lt;= MIR(21); 
    PLD(1)  &lt;= MIR(20); 
    PLD(0)  &lt;= MIR(19); 
    MXA     &lt;= MIR(18);
    S(2)    &lt;= MIR(17);
    S(1)    &lt;= MIR(16); 
    S(0)    &lt;= MIR(15);
    MXE     &lt;= MIR(14);
    CP      &lt;= MIR(13);
    ZP      &lt;= MIR(12);
    MXB(1)  &lt;= MIR(11); 
    MXB(0)  &lt;= MIR(10);
    OB      &lt;= MIR(9); 
    GA2     &lt;= MIR(8); 
    AHS     &lt;= MIR(7); 
    GA1     &lt;= MIR(6); 
    GI      &lt;= MIR(5);
    GT      &lt;= MIR(4); 
    GC      &lt;= MIR(3); 
    ASR     &lt;= MIR(2); 
    GA      &lt;= MIR(1); 
    WRE     &lt;= MIR(0);

----ÂØÑÂ≠òÂô®RiÁöÑÂÆö‰πâ
    RS(2 downto 0) &lt;= IR(2 downto 0);

    pRi:
    process(WRC, WRE, RS)
    begin
        if (WRC'event and WRC ='0') then 
            if (WRE = '0') then 
                case RS is
                    when "000" =&gt; R0 &lt;= DB;
                    when "001" =&gt; R1 &lt;= DB;
                    when "010" =&gt; R2 &lt;= DB;
                    when "011" =&gt; R3 &lt;= DB;
                    when "100" =&gt; R4 &lt;= DB;
                    when "101" =&gt; R5 &lt;= DB;
                    when "110" =&gt; R6 &lt;= DB;
                    when "111" =&gt; R7 &lt;= DB;
                    when others =&gt; NULL;
                end case;
            end if;
        end if;
    end process pRi;

----ÂØÑÂ≠òÂô®ËæìÂá∫ROUTÁöÑÂÆö‰πâ
    ROUT    &lt;=  R0 when RS = "000" else
                R1 when RS = "001" else
                R2 when RS = "010" else
                R3 when RS = "011" else
                R4 when RS = "100" else
                R5 when RS = "101" else
                R6 when RS = "110" else
                R7;

----MUXBÁöÑÂÆö‰πâ
    pMUXB:
    process(OB, MXB)
    begin
        if(OB = '0') then
            case MXB is
                when "00" =&gt; DB &lt;= FF(7 downto 0);
                when "01" =&gt; DB &lt;= PC(15 downto 8);
                when "10" =&gt; DB &lt;= PC(7 downto 0);
                when others =&gt; DB &lt;= ROUT;
            end case;
        else
            DB &lt;="ZZZZZZZZ";
        end if;
    end process pMUXB;

----MUXCÁöÑÂÆö‰πâ
    AB &lt;= PC                when MXC = "00" else
          ADRH&amp;ADRL         when MXC = "01" else
         SP                 when MXC = "10";

----MUXDÁöÑÂÆö‰πâ
    PCADD   &lt;=  '0'         when PLD = "000" else
                CY          when PLD = "001" else
                not ZY      when PLD = "010" else
                not KRIX    when PLD = "011" else
                not PRIX    when PLD = "100" else
                '1'         when PLD = "101" else
                ZY          when PLD = "110";

----TMPÁöÑÂÆö‰πâ
    pTMP:
    process(CT, GT)
    begin
        if(CT'event and CT = '0') then
            if(GT = '0') then 
                TMP &lt;= DB;
            end if;
        end if;
    end process pTMP;

----AÁöÑÂÆö‰πâ    
    pA:
    process(CA, ASR)
    variable POOPOO:std_logic_vector(7 downto 0);
    begin
        if(CA'event and CA = '0') then
            if(ASR = '0') then 
                POOPOO := A;
                CYA  &lt;= POOPOO(0);      --ÁßªÂá∫ÁöÑÊú´‰Ωç
                A    &lt;= POOPOO(7) &amp; POOPOO(7 downto 1);
            elsif(GA = '0') then
                A &lt;= DB;
            end if;
        end if;
    end process pA;

----MUXEÁöÑÂÆö‰πâ
     CYD &lt;= FF(8) when MXE = '0' else
                CYA;

----ACTÁöÑÂÆö‰πâ
    pACT:
    process(CC, GC)
    begin
        if(CC'event and CC = '0') then
            if(GC = '0') then 
                ACT &lt;= A;
            end if;
        end if;
    end process pACT;

    FA &lt;= '0'&amp;ACT; --Êâ©Â±ïÊàê‰πù‰Ωç
    FB &lt;= '0'&amp;ROUT when MXA = '0' else
          '0'&amp;TMP;

----ALUÁöÑÂÆö‰πâ
    FF  &lt;=  FA + FB         when S = "000" else
            FA - FB         when S = "001" else
            FA              when S = "010" else
            FB              when S = "011" else
            not FB          when S = "100" else
            "000000000"     when S = "101" else
            "000000000"     when S = "110" else
            FA + '1';

----CYÁöÑÂÆö‰πâ
    pCY:
    process(CCK, CP, FF)
    begin
        if(CCK'event and CCK = '0') then 
            if(CP = '0') then 
                CY &lt;= CYD;
            end if;
        end if;
    end process pCY;

----ZYÁöÑÂÆö‰πâ
    pZY:
    process(ZCK, ZP, FF)
    begin
        if(ZCK'event and ZCK = '0') then 
            if(ZP = '0') then 
                if(FF = "000000000") then 
                    ZY &lt;= '1';
                else
                    ZY &lt;= '0';
                end if;
            end if;
        end if;
    end process pZY;

----PCÁöÑÂÆö‰πâ   
    pPC:
    process(PCK, PRST, PCADD)
    begin
        if(PRST = '0') then 
            PC &lt;= "0000000000000000";
        elsif(PCK'event and PCK = '0') then
            if(PCADD = '1') then PC &lt;= AB;
            elsif(PINC = '0') then 
                PC &lt;= PC + 1;
            end if;
        end if;
    end process pPC;

----IRÁöÑÂÆö‰πâ
    pIR:
    process(CCI, GI, DB)
    begin
        if(CCI'event and CCI = '0') then 
            if(GI = '0') then 
                IR &lt;= DB;
            end if;
        end if;
    end process pIR;

----ADRHÁöÑÂÆö‰πâ
    pADRH:
    process(CA1, GA1, AHS, DB)
    begin
        if(CA1'event and CA1 = '0') then 
            if(AHS = '0') then ADRH &lt;= "01111110";
                elsif(GA1 = '0') then 
                    ADRH &lt;= DB;
            end if;
        end if;
    end process pADRH;

----ADRLÁöÑÂÆö‰πâ
    pADRL:
    process(CA2, GA2, DB)
    begin
        if(CA2'event and CA2 = '0') then 
            if(GA2 = '0') then 
                ADRL &lt;= DB;
            end if;
        end if;
    end process pADRL;

----SPÁöÑÂÆö‰πâ
    pSP:
    process(SCK, SSP)
    begin
        if(SCK'event and SCK = '0') then 
            case SSP is
                when "01" =&gt; SP &lt;= SP - 1;
                when "10" =&gt; SP &lt;= SP + 1;
                when "11" =&gt; SP &lt;= "0111111111111111";
                when others =&gt; NULL;
            end case;
        end if;
    end process pSP;

----
    CI(31 downto 24)    &lt;=  A                           when MUX = "000" else
                            PC(15 downto 8)             when MUX = "001" else
                            ADRH                        when MUX = "010" else
                            R0                          when MUX = "011" else
                            R2                          when MUX = "100" else
                            R4                          when MUX = "101" else
                            R6                          when MUX = "110" else
                            TMP;

    CI(23 downto 16)    &lt;=  IR                          when MUX = "000" else
                            PC(7 downto 0)              when MUX = "001" else
                            ADRL                        when MUX = "010" else
                            R1                          when MUX = "011" else
                            R3                          when MUX = "100" else
                            R5                          when MUX = "101" else
                            R7                          when MUX = "110" else
                            ACT;

    CI(15 downto 12)    &lt;=  SP(15 downto 12)            when MUX = "000" else
                            SP(11 downto 8)             when MUX = "001" else
                            SP(7 downto 4)              when MUX = "010" else
                            SP(3 downto 0)              when MUX = "011" else
                            MIR(17 downto 14);

    CI(11)              &lt;=  KRIX                        when MUX = "000" else
                            PRIX                        when MUX = "001" else
                            OB                          when MUX = "010" else
                            MPLD                        when MUX = "011" else
                            MIR(22);

    CI(10)              &lt;=  PRIX                        when MUX = "000" else
                            KRIX                        when MUX = "001" else
                            PINC                        when MUX = "010" else
                            GI                          when MUX = "011" else
                            CO(3)                       when MUX = "100" else
                            CO(0);

end cpu_8_behave ;
</code></pre>

<p>And here&rsquo;s my current instruction set.</p>

<pre><code class="asm instructionSet.asm">-MOV
A,Ri
00000iii

-MOV
Ri,A
00001iii

-MOV
A,@Ri
00010iii

-MOV
@Ri,A
00011iii

-ADD
A,Ri
00100iii

-SUB
A,Ri
00101iii

-MOV
A,#data8
00110000
dddddddd

-MOV
Ri,#data8
00111iii
dddddddd

-LDA
addr
01000000
aaaaaaaa
aaaaaaaa

-STA
addr
01001000
aaaaaaaa
aaaaaaaa

-JC
addr
01010000
aaaaaaaa
aaaaaaaa

-JMP
addr
01011000
aaaaaaaa
aaaaaaaa

-JNKB
addr
01100000
aaaaaaaa
aaaaaaaa

-JNPB
addr
01101000
aaaaaaaa
aaaaaaaa

-CALL
addr
01110000
aaaaaaaa
aaaaaaaa

-RET
01111000

-RSP
10000000

-SUB
A,@Ri
10001iii

-ASR
A
10010000

-CLR
addr
10011000
aaaaaaaa
aaaaaaaa

-PUSH
Ri
10100iii

-POP
Ri
10101iii

-JZ
addr
10110000
aaaaaaaa
aaaaaaaa

-ADC
A,Ri
10111iii

-enddef
</code></pre>

<p>Below is the assembly code for testing 2-digit addition.</p>

<pre><code class="asm test.asm">MOV R7,#0H

W1: 
 JNPB W1
 MOV A,#AH
 STA 8002H
W2:
 JNPB W2
 STA 8002H

L2:
 JNKB L2
 LDA 8001H
 MOV R2,A
L1:
 JNKB L1
 LDA 8001H
 MOV R1,A
WL1:
 JNPB WL1
 STA 8002H
WL2:
 JNPB WL2
 MOV A,R2
 MOV R0,#10H
 ADD A,R0
 STA 8002H
WADD:
 JNPB WADD
 MOV A,#10H
 STA 8002H
WADD1:
 JNPB WADD1
 MOV A,#AH
 STA 8002H
WADD2:
 JNPB WADD2
 STA 8002H

L4:
 JNKB L4
 LDA 8001H
 MOV R4,A
L3:
 JNKB L3
 LDA 8001H
 MOV R3,A
W3:
 JNPB W3
 STA 8002H
W4:
 JNPB W4
 MOV A,R4
 MOV R0,#10H
 ADD A,R0
 STA 8002H
WEQ:
 JNPB WEQ
 MOV A,#19H
 STA 8002H
WEQ1:
 JNPB WEQ1
 MOV A,#AH
 STA 8002H
WEQ2:
 JNPB WEQ2
 STA 8002H

 MOV A,R4
 ADD A,R2
 MOV R6,A

 MOV A,R1
 ADD A,R3
 MOV R5,A

 MOV R0, #AH
 SUB A,R0
 JC Z1

 MOV R5,A
 MOV R0,#1H
 MOV A,R6
 ADD A,R0
 MOV R6,A

Z1:
 MOV R0,#AH
 MOV A,R6
 SUB A,R0
 JC Z2

 MOV R6,A
 MOV R7,#1H
Z2: 
W5:
 JNPB W5
 MOV A,R5
 STA 8003H
W6:
 JNPB W6
 MOV A,R6
 STA 8003H
W7:
 JNPB W7
 MOV A,R7
 MOV R0,#10H
 ADD A,R0
 STA 8003H

LOOP:
 JMP LOOP
</code></pre>

<p>Demon of 2-digit addition</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/dikTQ-9l2s0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
</feed>
