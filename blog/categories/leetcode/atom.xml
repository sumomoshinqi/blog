<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: leetcode | sumomoshinqi]]></title>
  <link href="http://sumomoshinqi.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://sumomoshinqi.github.io/"/>
  <updated>2015-03-20T20:05:42+08:00</updated>
  <id>http://sumomoshinqi.github.io/</id>
  <author>
    <name><![CDATA[sumomoshinqi]]></name>
    <email><![CDATA[edam.lqq@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Climbing Stairs]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs/"/>
    <updated>2015-03-20T20:01:00+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-climbing-stairs</id>
    <content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p>

<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>

<pre><code class="C Climbing Stairs">int climbStairs(int n) {
    int stepOne = 1;
    int stepTwo = 0;
    int ret = 0;
    int i;

    for (i = 0; i &lt; n; i++) {
        ret = stepOne + stepTwo;
        stepTwo = stepOne;
        stepOne = ret;
    }

    return ret;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Majority Element]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element/"/>
    <updated>2015-03-20T19:57:22+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-majority-element</id>
    <content type="html"><![CDATA[<p>Given an array of size n, find the majority element. The majority element is the element that appears more than <em>⌊ n/2 ⌋</em> times.</p>

<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>

<pre><code class="C Majority Element">intcomp(const void * a,const void * b)
{
    return * (int *)a - * (int *)b;
}
int majorityElement(int num[], int n) {
    qsort(num, n, sizeof(int), intcomp);
    return num[n/2];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode]Compare Version Numbers]]></title>
    <link href="http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers/"/>
    <updated>2015-03-20T19:27:39+08:00</updated>
    <id>http://sumomoshinqi.github.io/blog/2015/03/20/leetcode-compare-version-numbers</id>
    <content type="html"><![CDATA[<p>Compare two version numbers version1 and version2.  <br/>
If version1 > version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.</p>

<p>You may assume that the version strings are non-empty and contain only digits and the . character.   <br/>
The <code>.</code> character does not represent a decimal point and is used to separate number sequences.  <br/>
For instance, <code>2.5</code> is not &ldquo;two and a half&rdquo; or &ldquo;half way to version three&rdquo;, it is the fifth second-level revision of the second first-level revision.</p>

<p>Here is an example of version numbers ordering: <br/>
<code>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</code></p>

<pre><code class="C compareVersion">int compareVersion(char * version1, char * version2){
    int v1 = 0, v2 = 0;
    int p1 = 0, p2 = 0;

    while (p1 &lt; strlen(version1) || p2 &lt; strlen(version2)) {
        v1 = 0;
        while (p1 &lt; strlen(version1)) {
            if (version1[p1] == '.') {
                ++p1;
                break;
            }
            v1 = 10 * v1 + (int)(version1[p1] - '0');
            ++p1;
        }

        v2 = 0;
        while (p2 &lt; strlen(version2)) {
            if (version2[p2] == '.') {
                ++p2;
                break;
            }
            v2 = 10 * v2 + (int)(version2[p2] - '0');
            ++p2;
        }

        if (v1 &lt; v2) {
            return -1;
        }
        else if (v1 &gt; v2) {
            return 1;
        }
    }

    return 0;
}  
</code></pre>
]]></content>
  </entry>
  
</feed>
